[{"/home/ammar/organization-of-points/src/index.js":"1","/home/ammar/organization-of-points/src/App.js":"2","/home/ammar/organization-of-points/src/components/AppTest.js":"3","/home/ammar/organization-of-points/src/utils/useMousePosition.js":"4","/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx":"5","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"6","/home/ammar/organization-of-points/src/screens/TestScreen/components/Result.jsx":"7","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx":"8","/home/ammar/organization-of-points/src/components/Graph/index.jsx":"9","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx":"10","/home/ammar/organization-of-points/src/utils/boardUtils.js":"11","/home/ammar/organization-of-points/src/utils/consts.js":"12","/home/ammar/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx":"13","/home/ammar/organization-of-points/src/components/ExamSteps/index.jsx":"14","/home/ammar/organization-of-points/src/components/Timer/index.jsx":"15","/home/ammar/organization-of-points/src/screens/TestScreen/index.jsx":"16","/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionInfo.jsx":"17","/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionBranches.jsx":"18","/home/ammar/organization-of-points/src/screens/TestScreen/components/context.js":"19","/home/ammar/organization-of-points/src/components/AppHeader/index.jsx":"20","/home/ammar/organization-of-points/src/components/AppFooter/index.jsx":"21","/home/ammar/organization-of-points/src/screens/GuideScreen/index .jsx":"22"},{"size":215,"mtime":1610913495795,"results":"23","hashOfConfig":"24"},{"size":1782,"mtime":1611132450652,"results":"25","hashOfConfig":"24"},{"size":1310,"mtime":1611867675901,"results":"26","hashOfConfig":"24"},{"size":511,"mtime":1610913495823,"results":"27","hashOfConfig":"24"},{"size":2528,"mtime":1611868050359,"results":"28","hashOfConfig":"24"},{"size":6568,"mtime":1611863875992,"results":"29","hashOfConfig":"24"},{"size":872,"mtime":1611158077080,"results":"30","hashOfConfig":"24"},{"size":2528,"mtime":1610374239857,"results":"31","hashOfConfig":"24"},{"size":786,"mtime":1611612795608,"results":"32","hashOfConfig":"24"},{"size":17749,"mtime":1611841857158,"results":"33","hashOfConfig":"24"},{"size":3107,"mtime":1611841844862,"results":"34","hashOfConfig":"24"},{"size":446,"mtime":1611151187997,"results":"35","hashOfConfig":"24"},{"size":659,"mtime":1611612795612,"results":"36","hashOfConfig":"24"},{"size":3744,"mtime":1611670659007,"results":"37","hashOfConfig":"24"},{"size":1458,"mtime":1611132450652,"results":"38","hashOfConfig":"24"},{"size":0,"mtime":1610913495795,"results":"39","hashOfConfig":"24"},{"size":1021,"mtime":1611612795612,"results":"40","hashOfConfig":"24"},{"size":1394,"mtime":1611838539816,"results":"41","hashOfConfig":"24"},{"size":84,"mtime":1611732404550,"results":"42","hashOfConfig":"24"},{"size":211,"mtime":1611777377073,"results":"43","hashOfConfig":"24"},{"size":212,"mtime":1611777797062,"results":"44","hashOfConfig":"24"},{"size":2078,"mtime":1611871077538,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},"gw6x7x",{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"49"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"49"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"49"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"49"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"49"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"79"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"49"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ammar/organization-of-points/src/index.js",["103"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["104","105"],"/home/ammar/organization-of-points/src/App.js",["106","107","108"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/ammar/organization-of-points/src/components/AppTest.js",["109"],"/home/ammar/organization-of-points/src/utils/useMousePosition.js",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx",["110","111"],"/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["112","113","114","115"],"import React, { useRef, useState, useEffect, useContext } from \"react\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\nimport RotateRightIcon from \"@material-ui/icons/RotateRight\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\nimport { getShapePoints, reScaledShapes } from \"../../../utils/boardUtils\"\nimport { ExamAnswersContext } from './context'\nimport \"../style.css\";\n\nfunction AnswerField(props) {\n\n  const svgRef = useRef();\n  //states\n  const [boardSize, setSvgSize] = useState(1);\n  const [rotateAngle, setRotateAngle] = useState(0);\n  const [lines, setLines] = useState([]);\n  const [history, setHistory] = useState({\n    numberOfDeletions: 0,\n    numberOfRightRotations: 0,\n    numberOfLeftRotations: 0,\n  });\n  const [currentLine, setCurrentLine] = useState({\n    point_1: null,\n    point_2: null,\n  });\n  const [action, setAction] = useState(\"add\");\n\n  /// connect the branch shapes given branch== array of shapes....\n\n  const [branchShapes, setBranchShapes] = useState([]);\n\n  const { answers, setAnswers, currentQuestion } = useContext(ExamAnswersContext);\n\n\n  useEffect(() => {\n    setAnswers(prev => {\n      prev[currentQuestion][props.prevBranch].lines = lines;\n      prev[currentQuestion][props.prevBranch].history = history;\n      prev[currentQuestion][props.prevBranch].boardSize = boardSize;\n      return [...prev];\n    });\n    {\n      const { lines, history } = answers[currentQuestion][props.branchId];\n      setLines(lines);\n      setHistory(history);\n    }\n\n  }, [props.branchId, currentQuestion])\n\n\n  useEffect(() => {\n    setBranchShapes(prev => {\n      return reScaledShapes(props.branch, boardSize);\n    })\n  }, [props.branch, boardSize])\n\n  useEffect(() => {\n    setSvgSize(svgRef.current.clientHeight);\n  }, []);\n\n  useEffect(() => {\n\n    if (currentLine.point_1 && currentLine.point_2) {\n      const reversedLine = {\n        point_1: currentLine.point_2,\n        point_2: currentLine.point_1,\n      };\n      if (\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(currentLine)) &&\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(reversedLine))\n      ) {\n        setLines((prev) => {\n          return [...prev, currentLine];\n        });\n      }\n\n      setCurrentLine({ point_1: null, point_2: null });\n    }\n  }, [currentLine]);\n\n  // handlers\n  const handleLineClick = (event) => {\n    if (action === \"delete\") {\n      const index = event.target.dataset.index;\n      setLines((prev) => {\n        prev[index] = \"deleted\";\n        return prev.filter((line) => line !== \"deleted\");\n      });\n      setHistory(prev => {\n        let { numberOfDeletions } = prev;\n        numberOfDeletions++;\n        return { ...prev, numberOfDeletions }\n      })\n    }\n  };\n\n  const handleAction = (event) => {\n    setAction(event.target.name);\n  };\n\n  const handleCircleClick = (event) => {\n    const point = {\n      x: event.target.getAttribute(\"cx\"),\n      y: event.target.getAttribute(\"cy\"),\n    };\n    if (currentLine.point_1 === null) {\n      setCurrentLine({ point_1: point, point_2: null });\n      return;\n    }\n    if (JSON.stringify(currentLine.point_1) !== JSON.stringify(point)) {\n      setCurrentLine((prev) => {\n        return { ...prev, point_2: point };\n      });\n    }\n  };\n\n  const handleLeftRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle - 10);\n    setHistory(prev => {\n      let { numberOfLeftRotations } = prev;\n      numberOfLeftRotations++;\n      return { ...prev, numberOfLeftRotations };\n    })\n  };\n\n  const handleRightRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle + 10);\n    setHistory(prev => {\n      let { numberOfRightRotations } = prev;\n      numberOfRightRotations++;\n      return { ...prev, numberOfRightRotations };\n    })\n  };\n  return (\n    <div className=\"answer-board-tools\">\n      <div className={props.className[0]}>\n        <svg\n          ref={svgRef}\n          className={`${props.className[1] ? props.className[1] : \"question-branch-paper\"\n            } add-cursor`}\n          transform={`rotate(${10 * (history.numberOfRightRotations - history.numberOfLeftRotations)},0,0)`}\n        >\n          <g>\n            {lines.map((l, index) => {\n              return (\n                <line\n                  key={JSON.stringify(l) + index}\n                  x1={l.point_1.x}\n                  y1={l.point_1.y}\n                  x2={l.point_2.x}\n                  y2={l.point_2.y}\n                  strokeWidth=\"3\"\n                  stroke=\"green\"\n                  data-index={index}\n                  className={`graph-line ${action === \"delete\" ? \"delete-cursor\" : \"add-cursor\"\n                    }`}\n                  onClick={handleLineClick}\n                />\n              );\n            })}\n          </g>\n          {branchShapes.map(shape => {\n            return (<g key={JSON.stringify(shape)}>\n              {getShapePoints(shape).map((point, index) => {\n                return (\n                  <circle\n                    key={index}\n                    cx={point.x}\n                    cy={point.y}\n                    r=\"5\"\n                    fill=\"red\"\n                    onClick={handleCircleClick}\n                  />\n                );\n              })\n              }\n              {\n                // shap.map(line => {\n                //   const { point_1, point_2 } = line;\n                //   return <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} stroke=\"blue\" strokeWidth='3' />\n                // })\n              }\n            </g>)\n          })\n          }\n\n        </svg>\n      </div>\n\n      <div className=\"tools\">\n        <IconButton aria-label=\"left\" onClick={handleLeftRotate}>\n          <RotateLeftIcon style={{ fontSize: 40 }} />\n        </IconButton>\n\n        <IconButton aria-label=\"right\" onClick={handleRightRotate}>\n          <RotateRightIcon style={{ fontSize: 40 }} />\n        </IconButton>\n        <IconButton\n          aria-label=\"erase\"\n          name=\"delete\"\n          onClick={(e) => {\n            e.target.name = \"delete\";\n            handleAction(e);\n          }}\n        >\n          <DeleteSweepIcon style={{ fontSize: 40 }} />\n        </IconButton>\n\n        <IconButton aria-label=\"add\" name=\"add\" onClick={handleAction}>\n          <LinearScaleIcon style={{ fontSize: 40 }} />\n        </IconButton>\n      </div>\n    </div>\n  );\n};\n\nexport default AnswerField;\n","/home/ammar/organization-of-points/src/screens/TestScreen/components/Result.jsx",["116","117","118","119","120","121"],"import React, { useEffect } from \"react\";\nimport imgUrl from \"../../../img-icons/star.svg\";\n\nfunction Result(props) {\n  const result = props.result;\n  const [starNum, setStarNum] = React.useState(null);\n  const MessageArr = [\n    \"You got only one star\",\n    \"Not bad you got Two Stars\",\n    \"Great job You got THREE stars\",\n  ];\n\n  const getResult = () => setStarNum(prev=> result >= 9 && [1,1,1] || result >= 5 && [1,1] || [1]);\n  \n  const starImg = <img style={{width: 150}} src={imgUrl}></img>;\n\n  useEffect(() => {\n    getResult();\n  }, []);\n\n  if (!starNum) return <p>Something went wrong</p>;\n  return (\n    <div>\n      <p>{MessageArr[starNum.length - 1]}</p>\n      <div className=\"stars\" style={{display:'flex'}}>\n        {starNum.map((star, index) => (\n          <div key={index}>{starImg}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx",["122","123"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/ammar/organization-of-points/src/components/Graph/index.jsx",["124"],"\nimport './style.css'\nexport function Line(props) {\n    const { point_1, point_2 } = props;\n    return (\n        <g fill={props.fill}>\n            <circle cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point='point_1' />\n            <circle cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point='point_2' />\n            <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke={props.fill} data-index={props.index} className={props.deleteLine ? 'erasable' : 'normal'} />\n        </g>\n\n    )\n}\n\nexport default function Graph(props) {\n\n    return (<g>\n        {props.points.map(point => {\n            <circle cx={point.x} cy={point.y} r=\"5\" />\n        })}\n    </g>\n\n\n    )\n}\n","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx",["125","126","127","128","129","130","131","132","133","134"],"import React, { useRef, useState, useEffect, useCallback, useContext } from \"react\";\nimport { Line } from \"../Graph\";\nimport { adjustShapeToBoard, shapeCenter, shapeContainerParams, calcTowVectorsDeg, applyRotate, applyTranslate, normalizePoint } from '../../../src/utils/boardUtils'\nimport \"./style.css\";\n\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\n\n\nfunction useSvgMousePosition(svgRef) {\n  useEffect(() => {\n    console.log('useSvgMousePosition mount...')\n  }, [])\n\n  useEffect(() => {\n    console.log('useSvgMousePosition svgRef changed...')\n  }, [svgRef])\n  const mousePosition = useCallback(\n    (evt) => {\n      const point = svgRef.current.createSVGPoint();\n      point.x = evt.clientX;\n      point.y = evt.clientY;\n      const { x, y } = point.matrixTransform(\n        svgRef.current.getScreenCTM().inverse()\n      );\n      return { x, y };\n    },\n    [svgRef],\n  )\n\n  return mousePosition;\n\n}\n\nconst minTwoPointsDistance = 20;\n\nexport default function DrawBoard(props) {\n  const boardRef = useRef();\n  const [boardSize, setBoardSize] = useState(0);\n  const [isDeleteActive, SetDeleteActivion] = useState(false);\n  const [linesNum, setLinesNum] = useState(3);\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  const [lines, setlines] = useState([]);\n\n  const getMousePosition = useSvgMousePosition(boardRef)\n\n  const getSelectedPoint = useCallback(\n    (point, index) => {\n      if (index < lines.length) {\n        return lines[index][point];\n      }\n    },\n    [linesNum]\n  );\n\n  const startDrag = useCallback(\n    (evt) => {\n      if (evt.target.classList.contains(\"draggable\")) {\n        console.log(\"start drag ....\");\n        const { point, index } = evt.target.dataset;\n        const pointCoordinates = getSelectedPoint(point, index);\n        if (pointCoordinates) {\n          const offset = getMousePosition(evt);\n          offset.x -= pointCoordinates.x;\n          offset.y -= pointCoordinates.y;\n          console.log(offset);\n          setSelectedPoint({\n            point,\n            index,\n            offset,\n          });\n        }\n      } else if (evt.target.classList.contains(\"erasable\")) {\n        console.log(\"object is erasable...\");\n        const index = evt.target.dataset.index;\n        setlines(prev => {\n          console.log(prev)\n          return prev.filter((_, i) => i != index);\n        })\n      }\n    },\n\n    [setSelectedPoint, getSelectedPoint, setlines]\n  );\n\n  const drag = useCallback(\n    (evt) => {\n      if (selectedPoint) {\n        evt.preventDefault();\n        const position = getMousePosition(evt);\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        actualPoint.x = position.x - offset.x;\n        actualPoint.y = position.y - offset.y;\n        setlines((prevPoints) => [...prevPoints]);\n      }\n    },\n    [selectedPoint, getMousePosition, getSelectedPoint]\n  );\n\n  const endDrag = useCallback(\n    (evt) => {\n      boardRef.current.removeEventListener(\"mousemove\", drag);\n      if (selectedPoint) {\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        if (actualPoint) {\n          let closestPointFound = false;\n          lines.forEach((line, index) => {\n            if (!closestPointFound) {\n              if (distance(actualPoint, line.point_1) < minTwoPointsDistance) {\n                actualPoint.x = line.point_1.x;\n                actualPoint.y = line.point_1.y;\n                closestPointFound = true;\n              } else if (\n                distance(actualPoint, line.point_2) < minTwoPointsDistance\n              ) {\n                actualPoint.x = line.point_2.x;\n                actualPoint.y = line.point_2.y;\n                closestPointFound = true;\n              }\n            }\n          });\n          setlines((prevPoints) => [...prevPoints]);\n        }\n        setSelectedPoint(null)\n      }\n    },\n    [boardRef, drag, selectedPoint]\n  );\n\n  useEffect(() => {\n    setBoardSize(boardRef.current.clientHeight);\n  }, [])\n\n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousedown\", startDrag);\n    boardRef.current.addEventListener(\"mouseup\", endDrag);\n    boardRef.current.addEventListener(\"mouseleave\", endDrag);\n  }, [boardRef, drag, startDrag, endDrag]);\n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousemove\", drag);\n  }, [selectedPoint]);\n\n  // tool handlers\n\n  const handleAddLine = (event) => {\n    const newLine = {\n      point_1: {\n        x: 20,\n        y: 280,\n      },\n      point_2: {\n        x: 20,\n        y: 240,\n      },\n    };\n\n    setlines((prev) => {\n      prev.push({ ...newLine });\n      return [...prev];\n    });\n\n    setLinesNum((prev) => prev + 1);\n    SetDeleteActivion(false);\n  };\n\n  const handleDeleteLine = (event) => {\n    console.log(\"delete activated...\");\n    SetDeleteActivion(true);\n  };\n\n  const handleClear = (event) => {\n    setlines([]);\n  };\n\n  const handleSubmitGraph = (event) => {\n    const myStorage = window.localStorage;\n    const normalizedLines = [...lines].map(line => {\n      let { point_1, point_2 } = line;\n      point_1 = normalizePoint(point_1, boardSize);\n      point_2 = normalizePoint(point_2, boardSize);\n      return { point_1, point_2 };\n    })\n    let shapes = myStorage.getItem('myShapes');\n    if (shapes) {\n      shapes = JSON.parse(shapes);\n      shapes.push(normalizedLines);\n      myStorage.setItem(\"myShapes\", JSON.stringify(shapes));\n      return;\n    }\n    shapes = [];\n    shapes.push(normalizedLines);\n    myStorage.setItem('myShapes', JSON.stringify(shapes));\n  };\n  return (\n    <div className=\"painter\">\n      <svg\n        ref={boardRef}\n        id=\"mainBoard\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"draw-board\"\n      >\n        {lines.map((line, index) => {\n          return (\n            <Line\n              key={JSON.stringify(line) + index}\n              {...line}\n              index={index}\n              fill={index === lines.length - 1 ? \"blue\" : \"red\"}\n              deleteLine={isDeleteActive}\n            />\n          );\n        })}\n      </svg>\n      <div className=\"actions\">\n        <button name=\"add\" onClick={handleAddLine}>\n          Add Line\n        </button>\n        <button name=\"delete\" onClick={handleDeleteLine}>\n          delete Line\n        </button>\n        <button onClick={handleClear}>\n          clear all\n        </button>\n        <button name=\"submit\" onClick={handleSubmitGraph}>\n          submit Graph\n        </button>\n      </div>\n    </div>\n  );\n}\n\n\nconst selectedShapesContext = React.createContext();\n\nexport function ExerciseWriter(props) {\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapes, setSelectedShapes] = useState([])\n\n  useEffect(() => {\n    const shapesData = JSON.parse(window.localStorage.getItem('shapes'));\n    setShapes(shapesData);\n  }, [])\n\n\n\n\n\n  return (\n    <selectedShapesContext.Provider value={{ selectedShapes, setSelectedShapes, shapes }}>\n      <div className=\"exam-writer-main\">\n        <ExamShapesBoard />\n        <div className=\"exam-writer-shapes-container\">\n          <div className=\"exam-writer-shapes\">\n            {shapes.map((shape, index) => {\n              return (<ShapeImage key={JSON.stringify(shape) + index} index={index} shape={shape} />)\n            })}\n          </div>\n          <button>new shape</button>\n        </div>\n      </div>\n    </selectedShapesContext.Provider>\n\n  )\n}\n\nconst actions = {\n  rotate: {\n    cursor: \"rotatable\",\n    value: 'rotate'\n  },\n  delete: {\n    cursor: \"erasable\",\n    value: 'delete'\n  },\n  translate: {\n    cursor: \"moveable\",\n    value: 'translate'\n  },\n\n}\n\n\n\nconst ExamShapesBoard = React.memo((props) => {\n  const paperRef = useRef();\n  const [paperSize, setPaperSize] = useState(1);\n  const [shapes, setShapes] = useState([]);\n  const [shapesCount, setShapesCount] = useState(0);\n  const [action, setAction] = useState({ ...actions.translate })\n  const [selectedShape, setSelectedShape] = useState(null);\n\n  const { selectedShapes, setSelectedShapes } = useContext(selectedShapesContext);\n\n  const getMousePosition = useSvgMousePosition(paperRef);\n\n  const getSelectedShape = useCallback(\n    (index) => {\n      if (index < shapesCount) {\n        return shapes[index];\n      }\n    },\n    [shapesCount],\n  )\n\n  const drag = useCallback(\n    (evt) => {\n      console.log(\"drag...\")\n      if (selectedShape) {\n        const mousePosition = getMousePosition(evt);\n        const { index, offset } = selectedShape;\n        switch (action.value) {\n          case 'translate':\n            console.log('translate.....')\n            setShapes(prev => {\n              const currentShape = prev[index];\n              currentShape.translate.x = mousePosition.x - offset.x;\n              currentShape.translate.y = mousePosition.y - offset.y;\n              return [...prev]\n            })\n            break;\n          case 'rotate':\n            console.log('rotate...')\n            setShapes(prev => {\n              const shape = prev[index];\n              const { center, translate, scale } = shape;\n              const relativeCenter = {\n                x: (center.x + translate.x) * scale.x,\n                y: (center.y + translate.y) * scale.y\n              }\n              const v1 = {\n                x: offset.x - relativeCenter.x,\n                y: offset.y - relativeCenter.y\n              }\n              const v2 = {\n                x: mousePosition.x - relativeCenter.x,\n                y: mousePosition.y - relativeCenter.y\n              }\n              const deg = calcTowVectorsDeg(v2, v1);\n              console.log(\"current deg >>> \", deg)\n              shape.rotateDeg = offset.prevDeg + deg\n              return [...prev];\n            })\n            break;\n\n          default:\n            break;\n        }\n\n      }\n\n    },\n    [selectedShape, action, getMousePosition],\n  )\n\n  const startDrag = useCallback(\n    (evt) => {\n      const graph = evt.target.parentElement;\n      if (graph && graph.classList.contains('graph')) {\n        const { index } = graph.dataset\n        const currentShape = getSelectedShape(index);\n        const offset = getMousePosition(evt);\n        switch (action.value) {\n          case 'translate':\n            console.log(\"Start Translate...\");\n            offset.x -= currentShape.translate.x;\n            offset.y -= currentShape.translate.y;\n            setSelectedShape({ index, offset })\n            break;\n          case 'rotate':\n            console.log(\"Start Rotate...\")\n            offset.prevDeg = currentShape.rotateDeg;\n            console.log({ index, offset });\n            setSelectedShape({ index, offset })\n            break;\n          default:\n            break;\n        }\n\n      }\n    },\n    [getMousePosition, setSelectedShape, getSelectedShape, action]\n  )\n\n\n\n  const endDrag = useCallback(\n    (evt) => {\n      console.log('end drag...')\n      paperRef.current.removeEventListener('mousemove', drag);\n      setSelectedShape(null);\n    },\n    [paperRef, drag, setSelectedShape]//, startDrag\n  )\n\n\n  useEffect(() => {\n    console.log('rerendered... listner startDrag added')\n    paperRef.current.addEventListener('mousedown', startDrag);\n    return () => {\n      paperRef.current.removeEventListener('mousedown', startDrag);\n    }\n  }, [paperRef, startDrag])\n\n  useEffect(() => {\n    console.log('rerendered... listner endDrag added')\n    paperRef.current.addEventListener('mouseleave', endDrag);\n    paperRef.current.addEventListener('mouseup', endDrag)\n    return () => {\n      paperRef.current.removeEventListener('mouseleave', endDrag);\n      paperRef.current.removeEventListener('mouseup', endDrag)\n    }\n\n  }, [paperRef, endDrag])\n\n  useEffect(() => {\n    console.log(selectedShape);\n    if (selectedShape) {\n      paperRef.current.addEventListener('mousemove', drag);\n    }\n\n  }, [paperRef, selectedShape])\n\n  useEffect(() => {\n    setPaperSize(paperRef.current.clientHeight)\n  }, [paperRef, setPaperSize])\n\n\n  useEffect(() => {\n    if (selectedShapes.length > 0) {\n      setShapes(prev => {\n        return [...prev, ...selectedShapes.map((shape, index) => {\n          const adjustedShap = adjustShapeToBoard(shape, paperSize);\n          return {\n            lines: adjustedShap,\n            center: shapeCenter(adjustedShap),\n            container: shapeContainerParams(adjustedShap),\n            rotateDeg: 0,\n            translate: {\n              x: 0,\n              y: 0,\n            },\n            scale: {\n              x: 1,\n              y: 1\n            }\n          }\n        })]\n      })\n      setShapesCount(count => count + 1);\n      setSelectedShapes([]);\n\n    }\n  }\n    , [selectedShapes, setSelectedShapes, paperSize, setShapes, setShapesCount, paperRef]);\n\n\n  // handlers\n  const handleActionClick = (event) => {\n    console.log(event.target.name, 'had been clicked...')\n    setAction({ ...actions[event.target.name] })\n  }\n\n  const handleSubmit = (event) => {\n    const myStorage = window.localStorage;\n    const normalizedShapes = shapes.map(shape => {\n      let { lines, center, rotateDeg, translate, scale } = shape;\n      const actualCenter = { x: (center.x + translate.x) * scale.x, y: (center.y + translate.y) * scale.y }\n\n      lines = [...lines].map(line => {\n        /// apply the rotate and translate on each line's point\n        let { point_1, point_2 } = line;\n        console.log({ point_1, point_2 });\n        point_1 = applyTranslate(point_1, translate);\n        point_2 = applyTranslate(point_2, translate);\n        point_1 = applyRotate(point_1, rotateDeg, actualCenter);\n        point_2 = applyRotate(point_2, rotateDeg, actualCenter);\n        console.log(\"rotate >> \", rotateDeg);\n        console.log({ point_1, point_2 });\n        return { point_1, point_2 }\n\n      }).map(line => {\n        const [point_1, point_2] = [normalizePoint(line.point_1, paperSize), normalizePoint(line.point_2, paperSize)];\n        return { point_1, point_2 };\n      });\n      return lines\n    })\n\n    let exercise = myStorage.getItem('exercise');\n    if (exercise) {\n      exercise = JSON.parse(exercise);\n      exercise.push(normalizedShapes);\n      myStorage.setItem('exercise', JSON.stringify(exercise));\n      return;\n    }\n    exercise = [];\n    exercise.push(normalizedShapes);\n    myStorage.setItem('exercise', JSON.stringify(exercise));\n    console.log(shapes);\n  }\n\n\n  return (\n    <div className=\"exam-writer-paper\">\n      <svg ref={paperRef} className=\"exam-writer-draw-paper\">\n        {shapes.map((shape, index) => {\n          const { lines, center, translate, rotateDeg, scale, container } = shape;\n          return (\n            <g data-index={index} data-center={JSON.stringify(shape.center)} data-action={action.value} key={JSON.stringify(shape) + index} fill=\"blue\" transform={`rotate(${rotateDeg},${(center.x + translate.x) * scale.x},${(center.y + translate.y) * scale.y}) translate(${translate.x},${translate.y}) scale(${scale.x},${scale.y})`}\n              className=\" graph\">\n              <rect x={container.x} y={container.y} width={container.w} height={container.h} fill='transparent' className=\"moveable\" data-index={index} data-action='translate' />\n              {lines.map(line => {\n                return <g key={JSON.stringify(line) + index} className='graph'>\n                  <line\n                    x1={line.point_1.x}\n                    y1={line.point_1.y}\n                    x2={line.point_2.x}\n                    y2={line.point_2.y}\n                    stroke=\"blue\"\n                    strokeWidth=\"1\"\n                  />\n                  <line\n                    x1={line.point_1.x}\n                    y1={line.point_1.y}\n                    x2={line.point_2.x}\n                    y2={line.point_2.y}\n                    stroke=\"transparent\"\n                    strokeWidth=\"10\"\n                    data-index={index}\n                    data-action='scale'\n                    className=\"resizable\"\n                  />\n                  <circle cx={line.point_1.x} cy={line.point_1.y} r='10' fill='transparent' className=\"rotatable\" data-index={index}\n                    data-action='rotate' />\n                  <circle cx={line.point_2.x} cy={line.point_2.y} r='10' fill='transparent' className='rotatable' data-index={index}\n                    data-action='rotate' />\n                </g>\n              })}\n            </g>)\n        })}\n      </svg>\n      <div className=\"exam-writer-paper-tools\">\n        <button onClick={handleActionClick} name=\"delete\">delete shape</button>\n        <button onClick={handleActionClick} name=\"translate\">move shape</button>\n        <button onClick={handleActionClick} name=\"rotate\">rotate shape</button>\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n    </div>\n  )\n})\n\n\n\nfunction ShapeImage(props) {\n  const imageRef = useRef();\n  const [imageSize, setImageSize] = useState(1);\n  const [shape, setShape] = useState([]);\n  const { setSelectedShapes, shapes } = useContext(selectedShapesContext);\n\n\n  useEffect(() => {\n    setImageSize(imageRef.current.clientHeight);\n  }, [])\n\n  useEffect(() => {\n    const scaledShape = adjustShapeToBoard(props.shape, imageSize);\n    setShape(scaledShape);\n  }, [imageSize, props.shape]);\n\n  return (\n    <svg ref={imageRef} className='exam-writer-shape-image' index={props.index} onClick={() => setSelectedShapes(prev => [...prev, shapes[props.index]])}>\n      {shape.map((line, index) => {\n        return <line\n          key={JSON.stringify(line) + index}\n          x1={line.point_1.x}\n          y1={line.point_1.y}\n          x2={line.point_2.x}\n          y2={line.point_2.y}\n          stroke=\"blue\"\n          strokeWidth=\"1\"\n        />\n      })}\n    </svg>\n  )\n}\n","/home/ammar/organization-of-points/src/utils/boardUtils.js",["135"],"// const shapes = require(\"../data/shapes.json\");\nexport function normalizePoint(point, factor) {\n  const { x, y } = point;\n  if (factor != 0) {\n    return { x: x / factor, y: y / factor };\n  }\n}\nexport function scalePoint(point, factor) {\n  const { x, y } = point;\n  return { x: x * factor, y: y * factor };\n}\n\n/**\n *\n * @param {Array} shape\n * @param {Number} boardSize\n * this function will fit normalized shape to your displaying square board\n */\nexport function adjustShapeToBoard(shape, boardSize) {\n  return shape.map((line) => {\n    const point_1 = scalePoint(line.point_1, boardSize);\n    const point_2 = scalePoint(line.point_2, boardSize);\n    return { point_1, point_2 };\n  });\n}\n\n/**\n *\n * @param {Array} shape - array of objects like {point_1{\n * x: x_xoordinate,\n * y: y_coordinate},\n * point_2{\n * x: x_xoordinate,\n * y: y_coordinate}}\n * @returns {Array} shape points - the shape points\n */\n\nexport function getShapePoints(shape) {\n  const result = [];\n  shape.forEach((line) => {\n    const { point_1, point_2 } = line;\n    result.push(point_1, point_2);\n  });\n  return result;\n}\n\nexport function shapeCenter(shape) {\n  const shapePoints = getShapePoints(shape);\n  const x =\n    (Math.max(...shapePoints.map((point) => point.x)) +\n      Math.min(...shapePoints.map((point) => point.x))) /\n    2;\n  const y =\n    (Math.max(...shapePoints.map((point) => point.y)) +\n      Math.min(...shapePoints.map((point) => point.y))) /\n    2;\n  return { x, y };\n}\n\nexport function shapeContainerParams(shape) {\n  const shapePoints = getShapePoints(shape);\n  const x = Math.min(...shapePoints.map((point) => point.x));\n  const y = Math.min(...shapePoints.map((point) => point.y));\n  const w = Math.max(...shapePoints.map((point) => point.x)) - x;\n  const h = Math.max(...shapePoints.map((point) => point.y)) - y;\n  return { x, y, w, h };\n}\n\n/**\n *\n * @param {*} points\n * @param {*} factor\n */\nexport function reScalePoints(points, factor) {\n  return points.map((point) => {\n    const { x, y } = point;\n    return { x: x * factor, y: y * factor };\n  });\n}\nfunction multiplayTwoVectors(v1, v2) {\n  return v1.x * v2.x + v1.y * v2.y;\n}\n\nfunction vectorNorma(v) {\n  return Math.sqrt(multiplayTwoVectors(v, v));\n}\n\nexport function calcTowVectorsDeg(v1, v2) {\n  return (\n    Math.acos(\n      multiplayTwoVectors(v1, v2) / (vectorNorma(v1) * vectorNorma(v2))\n    ) *\n    (180 / Math.PI)\n  );\n}\n\nexport function reScaledShapes(shapes, boardSize) {\n  const rescaledShapes = shapes.map((shape) => {\n    return adjustShapeToBoard(shape, boardSize);\n  });\n  return rescaledShapes;\n}\n\nexport function applyRotate(vector, rotateDeg, center) {\n  const { x, y } = applyTranslate(vector, { x: -center.x, y: -center.y });\n  const [sinDeg, cosDeg] = [\n    Math.sin(rotateDeg * (Math.PI / 180)),\n    Math.cos(rotateDeg * (Math.PI / 180)),\n  ];\n  const [a, b] = [x * cosDeg - y * sinDeg, x * sinDeg + y * cosDeg];\n  return applyTranslate({ x: a, y: b }, center);\n}\n\nexport function applyTranslate(vector, translate) {\n  return { x: vector.x + translate.x, y: vector.y + translate.y };\n}\n\nexport function applyScale(vector) {}\n","/home/ammar/organization-of-points/src/utils/consts.js",[],["136","137"],"/home/ammar/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx",[],"/home/ammar/organization-of-points/src/components/ExamSteps/index.jsx",["138","139"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst steps = [\n  { id: 1, text: \"Exam 1\", step: \"Question 1\" },\n  { id: 2, text: \"Exam 2\", step: \"Step 2\" },\n  { id: 3, text: \"Exam 3\", step: \"Step 3\" },\n  { id: 4, text: \"Exam 4\", step: \"Step 4\" },\n  { id: 5, text: \"Exam 5\", step: \"Step 5\" },\n];\n\nfunction getSteps() {\n  return steps.map((step) => step.step);\n}\n\nfunction getStepContent(step) {\n  steps.find((stp) => stp.id === step);\n}\n\nexport default function ExamSteps() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = (step) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n            <div>\n              <Typography className={classes.instructions}>\n                {getStepContent(activeStep)}\n              </Typography>\n              <div>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={handleBack}\n                  className={classes.button}\n                >\n                  Back\n              </Button>\n                {/* <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n              </Button> */}\n              </div>\n            </div>\n          )}\n      </div>\n    </div>\n  );\n}\n","/home/ammar/organization-of-points/src/components/Timer/index.jsx",["140","141","142"],"import React, { useEffect, useState } from \"react\";\n\nconst Timer = (props) => {\n  const timeRightNow = new Date().getTime();\n\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    const timer = setInterval(function () {\n      const now = new Date().getTime();\n      const deadline = timeRightNow + (props.choosenTime || 10000000);\n      const t = deadline - now;\n      const days = Math.floor(t / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((t % (1000 * 60)) / 1000);\n      const updatedTimer = minutes + \":\" + seconds;\n      setTimer(updatedTimer);\n      if (t < 0) {\n        clearInterval(timer);\n        const timeOut = \"TIME OUT\";\n        setTimer(timeOut);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 30,\n        fontWeight: \"bold\",\n        color: \"#FFF\",\n        boxShadow: \"1px 1px 25px #9E9E9E\",\n        margin: 5,\n        borderWidth: 1,\n        borderColor: \"#9E9E9E\",\n        background: \"#F2AF58\",\n        ...props.style,\n        borderRadius: props.style.height / 2 || 75,\n      }}\n    >\n      <h3>{timer}</h3>\n    </div>\n  );\n};\n\nexport default Timer;\n","/home/ammar/organization-of-points/src/screens/TestScreen/index.jsx",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionInfo.jsx",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionBranches.jsx",["143"],"import React, { useState } from \"react\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport AnswerField from \"./AnswerField\";\nimport \"../style.css\";\nfunction QuestionBranches(props) {\n  const [count, setCount] = useState(0);\n  const [prevCount, setPrevCount] = useState(0)\n\n  const nextShape = () => {\n    if (count !== props.branches.length - 1) {\n      setPrevCount(count);\n      setCount((prev) => prev + 1);\n    }\n  };\n\n  const prevShape = () => {\n    if (count !== 0) {\n      setPrevCount(count);\n      setCount((prev) => prev - 1);\n    }\n  };\n  return (\n    <div className=\"answer-section\">\n      <IconButton\n        aria-label=\"previous\"\n        style={{ dropShadow: \"1px 3px 19px #9e9e9e\" }}\n        onClick={prevShape}\n      >\n        <ChevronLeftIcon style={{ fontSize: 40 }} />\n      </IconButton>\n      <AnswerField\n        className={[\"svg-draw-container\", \"shapes solution\"]}\n        branch={props.branches[count]}\n        branchId={count}\n        prevBranch={prevCount}\n      />\n\n      <IconButton\n        aria-label=\"next\"\n        style={{ dropShadow: \"1px 3px 19px #9e9e9e\" }}\n        onClick={nextShape}\n      >\n        <ChevronRightIcon style={{ fontSize: 40 }} />\n      </IconButton>\n    </div>\n  );\n}\n\nexport default QuestionBranches;\n","/home/ammar/organization-of-points/src/screens/TestScreen/components/context.js",[],"/home/ammar/organization-of-points/src/components/AppHeader/index.jsx",[],"/home/ammar/organization-of-points/src/components/AppFooter/index.jsx",[],"/home/ammar/organization-of-points/src/screens/GuideScreen/index .jsx",["144"],{"ruleId":"145","severity":1,"message":"146","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":11},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"145","severity":1,"message":"153","line":2,"column":25,"nodeType":"147","messageId":"148","endLine":2,"endColumn":34},{"ruleId":"145","severity":1,"message":"154","line":10,"column":10,"nodeType":"147","messageId":"148","endLine":10,"endColumn":15},{"ruleId":"145","severity":1,"message":"155","line":10,"column":17,"nodeType":"147","messageId":"148","endLine":10,"endColumn":25},{"ruleId":"145","severity":1,"message":"156","line":8,"column":8,"nodeType":"147","messageId":"148","endLine":8,"endColumn":14},{"ruleId":"145","severity":1,"message":"157","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":24},{"ruleId":"158","severity":1,"message":"159","line":39,"column":6,"nodeType":"160","endLine":39,"endColumn":23,"suggestions":"161"},{"ruleId":"145","severity":1,"message":"162","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":16},{"ruleId":"145","severity":1,"message":"163","line":16,"column":10,"nodeType":"147","messageId":"148","endLine":16,"endColumn":21},{"ruleId":"158","severity":1,"message":"164","line":49,"column":6,"nodeType":"160","endLine":49,"endColumn":39,"suggestions":"165"},{"ruleId":"158","severity":1,"message":"166","line":84,"column":6,"nodeType":"160","endLine":84,"endColumn":19,"suggestions":"167"},{"ruleId":"168","severity":1,"message":"169","line":13,"column":57,"nodeType":"170","messageId":"171","endLine":13,"endColumn":59},{"ruleId":"168","severity":1,"message":"169","line":13,"column":68,"nodeType":"170","messageId":"171","endLine":13,"endColumn":70},{"ruleId":"168","severity":1,"message":"172","line":13,"column":68,"nodeType":"170","messageId":"171","endLine":13,"endColumn":70},{"ruleId":"168","severity":1,"message":"172","line":13,"column":83,"nodeType":"170","messageId":"171","endLine":13,"endColumn":85},{"ruleId":"173","severity":1,"message":"174","line":15,"column":19,"nodeType":"175","endLine":15,"endColumn":58},{"ruleId":"158","severity":1,"message":"176","line":19,"column":6,"nodeType":"160","endLine":19,"endColumn":8,"suggestions":"177"},{"ruleId":"145","severity":1,"message":"178","line":4,"column":25,"nodeType":"147","messageId":"148","endLine":4,"endColumn":35},{"ruleId":"179","severity":1,"message":"180","line":55,"column":1,"nodeType":"181","messageId":"182","endLine":96,"endColumn":2},{"ruleId":"183","severity":1,"message":"184","line":18,"column":33,"nodeType":"185","messageId":"186","endLine":18,"endColumn":35},{"ruleId":"158","severity":1,"message":"187","line":55,"column":5,"nodeType":"160","endLine":55,"endColumn":15,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":80,"column":42,"nodeType":"191","messageId":"192","endLine":80,"endColumn":44},{"ruleId":"158","severity":1,"message":"193","line":85,"column":5,"nodeType":"160","endLine":85,"endColumn":51,"suggestions":"194"},{"ruleId":"145","severity":1,"message":"195","line":107,"column":31,"nodeType":"147","messageId":"148","endLine":107,"endColumn":37},{"ruleId":"158","severity":1,"message":"196","line":131,"column":5,"nodeType":"160","endLine":131,"endColumn":36,"suggestions":"197"},{"ruleId":"158","severity":1,"message":"198","line":147,"column":6,"nodeType":"160","endLine":147,"endColumn":21,"suggestions":"199"},{"ruleId":"158","severity":1,"message":"200","line":308,"column":5,"nodeType":"160","endLine":308,"endColumn":18,"suggestions":"201"},{"ruleId":"158","severity":1,"message":"202","line":406,"column":16,"nodeType":"147","endLine":406,"endColumn":23},{"ruleId":"158","severity":1,"message":"202","line":416,"column":16,"nodeType":"147","endLine":416,"endColumn":23},{"ruleId":"158","severity":1,"message":"198","line":427,"column":6,"nodeType":"160","endLine":427,"endColumn":31,"suggestions":"203"},{"ruleId":"189","severity":1,"message":"190","line":4,"column":14,"nodeType":"191","messageId":"192","endLine":4,"endColumn":16},{"ruleId":"149","replacedBy":"204"},{"ruleId":"151","replacedBy":"205"},{"ruleId":"145","severity":1,"message":"206","line":52,"column":9,"nodeType":"147","messageId":"148","endLine":52,"endColumn":19},{"ruleId":"145","severity":1,"message":"207","line":67,"column":9,"nodeType":"147","messageId":"148","endLine":67,"endColumn":19},{"ruleId":"145","severity":1,"message":"208","line":13,"column":13,"nodeType":"147","messageId":"148","endLine":13,"endColumn":17},{"ruleId":"145","severity":1,"message":"209","line":14,"column":13,"nodeType":"147","messageId":"148","endLine":14,"endColumn":18},{"ruleId":"158","severity":1,"message":"210","line":27,"column":6,"nodeType":"160","endLine":27,"endColumn":8,"suggestions":"211"},{"ruleId":"145","severity":1,"message":"162","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":16},{"ruleId":"145","severity":1,"message":"162","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":16},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["212"],"no-negated-in-lhs",["213"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","'Result' is defined but never used.","'normalizePoint' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'questions'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAnswers' needs the current value of 'questions'.","ArrayExpression",["214"],"'Button' is defined but never used.","'rotateAngle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'answers', 'boardSize', 'history', 'lines', 'props.prevBranch', and 'setAnswers'. Either include them or remove the dependency array.",["215"],"React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.",["216"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getResult'. Either include it or remove the dependency array.",["217"],"'handleLine' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useCallback has a missing dependency: 'lines'. Either include it or remove the dependency array.",["218"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useCallback has a missing dependency: 'getMousePosition'. Either include it or remove the dependency array.",["219"],"'offset' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'lines'. Either include them or remove the dependency array.",["220"],"React Hook useEffect has a missing dependency: 'drag'. Either include it or remove the dependency array.",["221"],"React Hook useCallback has a missing dependency: 'shapes'. Either include it or remove the dependency array.",["222"],"The ref value 'paperRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'paperRef.current' to a variable inside the effect, and use that variable in the cleanup function.",["223"],["212"],["213"],"'handleNext' is assigned a value but never used.","'handleSkip' is assigned a value but never used.","'days' is assigned a value but never used.","'hours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.choosenTime' and 'timeRightNow'. Either include them or remove the dependency array.",["224"],"no-global-assign","no-unsafe-negation",{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: [currentQuestion, questions]",{"range":"247","text":"248"},"Update the dependencies array to be: [props.branchId, currentQuestion, setAnswers, props.prevBranch, lines, history, boardSize, answers]",{"range":"249","text":"250"},"Update the dependencies array to be: [currentLine, lines]",{"range":"251","text":"252"},"Update the dependencies array to be: [getResult]",{"range":"253","text":"254"},"Update the dependencies array to be: [lines]",{"range":"255","text":"256"},"Update the dependencies array to be: [getSelectedPoint, getMousePosition]",{"range":"257","text":"258"},"Update the dependencies array to be: [drag, getSelectedPoint, lines, selectedPoint]",{"range":"259","text":"260"},"Update the dependencies array to be: [drag, selectedPoint]",{"range":"261","text":"262"},"Update the dependencies array to be: [shapes, shapesCount]",{"range":"263","text":"264"},"Update the dependencies array to be: [drag, paperRef, selectedShape]",{"range":"265","text":"266"},"Update the dependencies array to be: [props.choosenTime, timeRightNow]",{"range":"267","text":"268"},[1059,1076],"[currentQuestion, questions]",[1634,1667],"[props.branchId, currentQuestion, setAnswers, props.prevBranch, lines, history, boardSize, answers]",[2485,2498],"[currentLine, lines]",[542,544],"[getResult]",[1544,1554],"[lines]",[2423,2469],"[getSelectedPoint, getMousePosition]",[3995,4026],"[drag, getSelectedPoint, lines, selectedPoint]",[4445,4460],"[drag, selectedPoint]",[8344,8357],"[shapes, shapesCount]",[11898,11923],"[drag, paperRef, selectedShape]",[909,911],"[props.choosenTime, timeRightNow]"]