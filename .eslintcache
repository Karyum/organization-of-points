[{"/home/ammar/organization-of-points/src/index.js":"1","/home/ammar/organization-of-points/src/App.js":"2","/home/ammar/organization-of-points/src/components/AppTest.js":"3","/home/ammar/organization-of-points/src/utils/useMousePosition.js":"4","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx":"5","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx":"6","/home/ammar/organization-of-points/src/components/Graph/index.jsx":"7","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"8"},{"size":215,"mtime":1610383896673,"results":"9","hashOfConfig":"10"},{"size":2003,"mtime":1610374239857,"results":"11","hashOfConfig":"10"},{"size":390,"mtime":1610888786709,"results":"12","hashOfConfig":"10"},{"size":511,"mtime":1610415920226,"results":"13","hashOfConfig":"10"},{"size":4276,"mtime":1610879141746,"results":"14","hashOfConfig":"10"},{"size":2528,"mtime":1610374239857,"results":"15","hashOfConfig":"10"},{"size":730,"mtime":1610878822516,"results":"16","hashOfConfig":"10"},{"size":1414,"mtime":1610894557786,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"gw6x7x",{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"21"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"21"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ammar/organization-of-points/src/index.js",["41"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["42","43"],"/home/ammar/organization-of-points/src/App.js",["44","45","46","47"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n","/home/ammar/organization-of-points/src/components/AppTest.js",["48","49","50"],"import React from \"react\";\nimport DrawBoard, { DrawBoard2 } from \"./DrawBoard\";\nimport AnswerField from \"../screens/TestScreen/components/AnswerField\";\nimport Graph from \"./Graph\";\nimport \"./style.css\";\nexport default function AppTest() {\n  return (\n    <AnswerField\n      points={[\n        { x: 100, y: 100 },\n        { x: 200, y: 100 },\n        { x: 200, y: 200 },\n      ]}\n    />\n  );\n}\n","/home/ammar/organization-of-points/src/utils/useMousePosition.js",[],"/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx",["51","52","53","54","55","56","57","58","59","60","61"],"import React, { useRef, useState, useEffect ,useCallback} from 'react'\nimport  { Line } from '../Graph'\nimport './style.css'\n\nfunction distance(p1, p2) {\n    return Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2))\n}\n\nconst scaleLine = 'scale line';\nconst deleteLine = 'delete line';\nconst submitGraph = 'submit graph'\n\n\nexport default function DrawBoard(props) {\n    const boardRef = useRef()\n    const [boardSize, setBoardSize] = useState(0);\n    const [action,setAction] = useState(scaleLine)\n    const [selectedPoint,setSelectedPoint] = useState(null);\n    const [linePoints, setLinePoints] = useState([\n        {\n          point_1: {\n            x: 100,\n            y: 100,\n          },\n          point_2: {\n            x: 200,\n            y: 100,\n          },\n        },\n        {\n          point_1: {\n            x: 200,\n            y: 100,\n          },\n          point_2: {\n            x: 200,\n            y: 200,\n          },\n        },\n        {\n          point_1: {\n            x: 200,\n            y: 200,\n          },\n          point_2: {\n            x: 100,\n            y: 100,\n          },\n        },\n      ])\n\n    const  getMousePosition = useCallback(\n        (evt) => {\n            const point = boardRef.current.createSVGPoint();\n            point.x = evt.clientX;\n            point.y = evt.clientY;\n            const position = point.matrixTransform(boardRef.current.getScreenCTM().inverse());\n            console.log(\"getMousePosition >>\", position);\n            return position;\n        }\n       ,\n        [boardRef]\n    )\n\n    function getSelectedPoint(point, index){\n        return linePoints[index][point];\n    }\n\n    const startDrag = useCallback(\n        (evt)=> {\n            if (evt.target.classList.contains(\"draggable\")) {\n                console.log(\"start drag ....\");\n                const {point,index} = evt.target.dataset;\n                const pointCoordinates = getSelectedPoint(point,index);\n               const offset = getMousePosition(evt);\n                offset.x -= pointCoordinates.x;\n                offset.y -= pointCoordinates.y;\n                console.log(offset);\n                setSelectedPoint({\n                    point,index,offset\n                })\n            }\n        }\n    \n       , [setSelectedPoint]\n    )\n\n\n    const drag = useCallback(\n        (evt)=>{\n            console.log(\"drag ....\");\n            console.log(selectedPoint)\n            if (selectedPoint ) {\n                evt.preventDefault();\n                const position = getMousePosition(evt);\n                const {point,index,offset} = selectedPoint;\n                const actualPoint = getSelectedPoint(point,index)\n                actualPoint.x = position.x - offset.x;\n                actualPoint.y = position.y - offset.y;\n                console.log(linePoints)\n                setLinePoints(prevPoints => [...prevPoints]);\n            }\n        },\n        [selectedPoint,getMousePosition]\n    )\n\n\n    const endDrag = useCallback(\n        (evt)=> {\n            console.log(\"end drag ....\");\n            boardRef.current.removeEventListener('mousemove',drag);\n        },\n        [boardRef,drag],\n    )\n\n    useEffect(() => {\n        setBoardSize(boardRef.current.clientHeight);\n        console.log(\"reloaded\")\n        boardRef.current.addEventListener(\"mousedown\", startDrag)\n        boardRef.current.addEventListener(\"mousemove\", drag)\n        boardRef.current.addEventListener(\"mouseup\", endDrag)\n        boardRef.current.addEventListener(\"mouseleave\", endDrag)\n    }, [boardRef,drag,startDrag,endDrag])\n   \n    const result = [];\n    const points = linePoints.map(line => {\n        result.push(line.point_1);\n        result.push(line.point_2);\n    } )\n  \n    return (\n        <div className=\"painter\">\n            <svg ref={boardRef} id=\"mainBoard\" xmlns=\"http://www.w3.org/2000/svg\" className='draw-board'>\n            {/* {linePoints.map((line,index) => {\n                return <Line key={JSON.stringify(line)} {...line} index={index} />\n            })} */}\n            {\n\n            }\n         </svg>\n         <div className=\"actions\">\n             <button >Add Line</button>\n             <button>delete Line</button>\n             <button>submit Graph</button>\n         </div>\n        </div>\n        \n    )\n}\n\n\n","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx",["62","63"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/ammar/organization-of-points/src/components/Graph/index.jsx",["64"],"\nimport './style.css'\nexport function Line(props){\n    const {point_1, point_2} = props;\n    return (\n        <g fill=\"red\">\n        <circle  cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_1'/>\n        <circle  cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_2'/>\n        <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke='red' className=\"erasable\" />\n        </g>\n        \n    )\n}\n\nexport default function Graph(props) {\n  \n    return (<g>\n        {props.points.map(point=>{\n               <circle  cx={point.x} cy={point.y} r=\"5\" />\n           })}\n    </g>\n\n           \n    )\n}\n","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["65","66"],{"ruleId":"67","severity":1,"message":"68","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":11},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"67","severity":1,"message":"75","line":2,"column":25,"nodeType":"69","messageId":"70","endLine":2,"endColumn":34},{"ruleId":"67","severity":1,"message":"76","line":10,"column":10,"nodeType":"69","messageId":"70","endLine":10,"endColumn":15},{"ruleId":"67","severity":1,"message":"77","line":10,"column":17,"nodeType":"69","messageId":"70","endLine":10,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":74,"column":1,"nodeType":"80","messageId":"81","endLine":85,"endColumn":2},{"ruleId":"67","severity":1,"message":"82","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":17},{"ruleId":"67","severity":1,"message":"83","line":2,"column":21,"nodeType":"69","messageId":"70","endLine":2,"endColumn":31},{"ruleId":"67","severity":1,"message":"84","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":13},{"ruleId":"67","severity":1,"message":"85","line":2,"column":11,"nodeType":"69","messageId":"70","endLine":2,"endColumn":15},{"ruleId":"67","severity":1,"message":"86","line":5,"column":10,"nodeType":"69","messageId":"70","endLine":5,"endColumn":18},{"ruleId":"67","severity":1,"message":"87","line":10,"column":7,"nodeType":"69","messageId":"70","endLine":10,"endColumn":17},{"ruleId":"67","severity":1,"message":"88","line":11,"column":7,"nodeType":"69","messageId":"70","endLine":11,"endColumn":18},{"ruleId":"67","severity":1,"message":"89","line":16,"column":12,"nodeType":"69","messageId":"70","endLine":16,"endColumn":21},{"ruleId":"67","severity":1,"message":"90","line":17,"column":12,"nodeType":"69","messageId":"70","endLine":17,"endColumn":18},{"ruleId":"67","severity":1,"message":"91","line":17,"column":19,"nodeType":"69","messageId":"70","endLine":17,"endColumn":28},{"ruleId":"92","severity":1,"message":"93","line":85,"column":10,"nodeType":"94","endLine":85,"endColumn":28,"suggestions":"95"},{"ruleId":"92","severity":1,"message":"96","line":104,"column":9,"nodeType":"94","endLine":104,"endColumn":41,"suggestions":"97"},{"ruleId":"67","severity":1,"message":"98","line":126,"column":11,"nodeType":"69","messageId":"70","endLine":126,"endColumn":17},{"ruleId":"99","severity":1,"message":"100","line":126,"column":40,"nodeType":"101","messageId":"102","endLine":126,"endColumn":42},{"ruleId":"67","severity":1,"message":"103","line":4,"column":25,"nodeType":"69","messageId":"70","endLine":4,"endColumn":35},{"ruleId":"78","severity":1,"message":"79","line":55,"column":1,"nodeType":"80","messageId":"81","endLine":96,"endColumn":2},{"ruleId":"99","severity":1,"message":"100","line":18,"column":32,"nodeType":"101","messageId":"102","endLine":18,"endColumn":34},{"ruleId":"67","severity":1,"message":"104","line":6,"column":10,"nodeType":"69","messageId":"70","endLine":6,"endColumn":15},{"ruleId":"67","severity":1,"message":"105","line":6,"column":16,"nodeType":"69","messageId":"70","endLine":6,"endColumn":24},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'DrawBoard' is defined but never used.","'DrawBoard2' is defined but never used.","'Graph' is defined but never used.","'Line' is defined but never used.","'distance' is defined but never used.","'deleteLine' is assigned a value but never used.","'submitGraph' is assigned a value but never used.","'boardSize' is assigned a value but never used.","'action' is assigned a value but never used.","'setAction' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'getMousePosition' and 'getSelectedPoint'. Either include them or remove the dependency array.","ArrayExpression",["108"],"React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'linePoints'. Either include them or remove the dependency array.",["109"],"'points' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleLine' is assigned a value but never used.","'lines' is assigned a value but never used.","'setLines' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [getMousePosition, getSelectedPoint]",{"range":"114","text":"115"},"Update the dependencies array to be: [selectedPoint, getMousePosition, getSelectedPoint, linePoints]",{"range":"116","text":"117"},[2265,2283],"[getMousePosition, getSelectedPoint]",[2915,2947],"[selectedPoint, getMousePosition, getSelectedPoint, linePoints]"]