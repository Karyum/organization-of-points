[{"/home/webahead/Documents/webahead/final-project/organization-of-points/src/index.js":"1","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/AppTest.js":"2","/home/webahead/Documents/webahead/final-project/organization-of-points/src/App.js":"3","/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/useMousePosition.js":"4","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"5","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx":"6","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/DrawBoard/index.jsx":"7","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Graph/index.jsx":"8","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/SvgScreen/index.jsx":"9","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Timer/index.jsx":"10","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/ExamSteps/index.jsx":"11"},{"size":215,"mtime":1610893843447,"results":"12","hashOfConfig":"13"},{"size":509,"mtime":1610963594743,"results":"14","hashOfConfig":"13"},{"size":1782,"mtime":1610981059626,"results":"15","hashOfConfig":"13"},{"size":511,"mtime":1610893843447,"results":"16","hashOfConfig":"13"},{"size":4055,"mtime":1610981059626,"results":"17","hashOfConfig":"13"},{"size":723,"mtime":1610982260006,"results":"18","hashOfConfig":"13"},{"size":4276,"mtime":1610893843447,"results":"19","hashOfConfig":"13"},{"size":730,"mtime":1610893843447,"results":"20","hashOfConfig":"13"},{"size":2528,"mtime":1610448112351,"results":"21","hashOfConfig":"13"},{"size":1458,"mtime":1610981059626,"results":"22","hashOfConfig":"13"},{"size":3702,"mtime":1610981059626,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"1325t55",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"27"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"27"},"/home/webahead/Documents/webahead/final-project/organization-of-points/src/index.js",["56"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["57","58"],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/AppTest.js",["59","60","61","62"],"import React from \"react\";\nimport DrawBoard, { DrawBoard2 } from \"./DrawBoard\";\nimport AnswerField from \"../screens/TestScreen/components/AnswerField\";\nimport Graph from \"./Graph\";\nimport \"./style.css\";\nimport QuestionField from \"../screens/TestScreen/components/QuestionField\";\nexport default function AppTest() {\n  return (\n    <QuestionField />\n    // <AnswerField\n    //   points={[\n    //     { x: 100, y: 100 },\n    //     { x: 200, y: 100 },\n    //     { x: 200, y: 200 },\n    //   ]}\n    // />\n  );\n}\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/App.js",["63","64","65"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/useMousePosition.js",[],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["66"],"import React, { useRef, useState, useEffect } from \"react\";\nimport Timer from \"../../../components/Timer\";\nimport ExamSteps from \"../../../components/ExamSteps\";\nimport \"../style.css\";\n\nfunction AnswerField(props) {\n  const svgRef = useRef();\n  //states\n  const [rotateAngle, setRotateAngle] = useState(0);\n  const [lines, setLines] = useState([]);\n  const [currentLine, setCurrentLine] = useState({\n    point1: null,\n    point2: null,\n  });\n  const [action, setAction] = useState(\"add\");\n\n  //useEffect\n  useEffect(() => {\n    console.log(currentLine);\n\n    if (currentLine.point1 && currentLine.point2) {\n      const reversedLine = {\n        point1: currentLine.point2,\n        point2: currentLine.point1,\n      };\n      if (\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(currentLine)) &&\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(reversedLine))\n      ) {\n        setLines((prev) => {\n          return [...prev, currentLine];\n        });\n      }\n\n      setCurrentLine({ point1: null, point2: null });\n    }\n  }, [currentLine]);\n\n  // useEffect(() => {\n  //     svgRef.current.classList.toggle(\"delete-cursor\");\n  //     svgRef.current.classList.toggle(\"add-cursor\");\n  // }, [action]);\n\n  // handlers\n  const handleLineClick = (event) => {\n    console.log(action);\n    if (action === \"delete\") {\n      console.log(event.target.dataset);\n      const index = event.target.dataset.index;\n      setLines((prev) => {\n        prev[index] = \"deleted\";\n        return prev.filter((line) => line !== \"deleted\");\n      });\n    }\n  };\n\n  const handleAction = (event) => {\n    console.log(\"Action...\", event.target.name);\n    setAction(event.target.name);\n  };\n\n  const handleCircleClick = (event) => {\n    const point = {\n      x: event.target.getAttribute(\"cx\"),\n      y: event.target.getAttribute(\"cy\"),\n    };\n    if (currentLine.point1 === null) {\n      setCurrentLine({ point1: point, point2: null });\n      return;\n    }\n    if (JSON.stringify(currentLine.point1) !== JSON.stringify(point)) {\n      setCurrentLine((prev) => {\n        return { ...prev, point2: point };\n      });\n    }\n\n    console.log(point);\n  };\n\n  const handleLeftRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle - 10);\n  };\n\n  const handleRightRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle + 10);\n  };\n  return (\n    <div>\n      <Timer choosenTime={300000} style={{ fontSize: 25 }} />\n      <ExamSteps />\n      <svg ref={svgRef} className=\"question-branch-paper add-cursor\">\n        <g transform={`rotate(${rotateAngle},150,150)`}>\n          {lines.map((l, index) => {\n            return (\n              <line\n                key={index}\n                x1={l.point1.x}\n                y1={l.point1.y}\n                x2={l.point2.x}\n                y2={l.point2.y}\n                strokeWidth=\"3\"\n                stroke=\"green\"\n                data-index={index}\n                className={`graph-line ${\n                  action === \"delete\" ? \"delete-cursor\" : \"add-cursor\"\n                }`}\n                onClick={handleLineClick}\n              />\n            );\n          })}\n          {props.points.map((point, index) => {\n            return (\n              <circle\n                key={index}\n                cx={point.x}\n                cy={point.y}\n                r=\"10\"\n                fill=\"red\"\n                onClick={handleCircleClick}\n              />\n            );\n          })}\n        </g>\n      </svg>\n      <div className=\"tools\">\n        <button className=\"tool-btn\" onClick={handleLeftRotate}>\n          left Rotate\n        </button>\n        <button className=\"tool-btn\" onClick={handleRightRotate}>\n          right Rotate\n        </button>\n        <button className=\"tool-btn\" name=\"delete\" onClick={handleAction}>\n          erase\n        </button>\n        <button className=\"tool-btn\" name=\"add\" onClick={handleAction}>\n          line\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default AnswerField;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx",[],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/DrawBoard/index.jsx",["67","68","69","70","71","72","73","74","75","76","77"],"import React, { useRef, useState, useEffect ,useCallback} from 'react'\nimport  { Line } from '../Graph'\nimport './style.css'\n\nfunction distance(p1, p2) {\n    return Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2))\n}\n\nconst scaleLine = 'scale line';\nconst deleteLine = 'delete line';\nconst submitGraph = 'submit graph'\n\n\nexport default function DrawBoard(props) {\n    const boardRef = useRef()\n    const [boardSize, setBoardSize] = useState(0);\n    const [action,setAction] = useState(scaleLine)\n    const [selectedPoint,setSelectedPoint] = useState(null);\n    const [linePoints, setLinePoints] = useState([\n        {\n          point_1: {\n            x: 100,\n            y: 100,\n          },\n          point_2: {\n            x: 200,\n            y: 100,\n          },\n        },\n        {\n          point_1: {\n            x: 200,\n            y: 100,\n          },\n          point_2: {\n            x: 200,\n            y: 200,\n          },\n        },\n        {\n          point_1: {\n            x: 200,\n            y: 200,\n          },\n          point_2: {\n            x: 100,\n            y: 100,\n          },\n        },\n      ])\n\n    const  getMousePosition = useCallback(\n        (evt) => {\n            const point = boardRef.current.createSVGPoint();\n            point.x = evt.clientX;\n            point.y = evt.clientY;\n            const position = point.matrixTransform(boardRef.current.getScreenCTM().inverse());\n            console.log(\"getMousePosition >>\", position);\n            return position;\n        }\n       ,\n        [boardRef]\n    )\n\n    function getSelectedPoint(point, index){\n        return linePoints[index][point];\n    }\n\n    const startDrag = useCallback(\n        (evt)=> {\n            if (evt.target.classList.contains(\"draggable\")) {\n                console.log(\"start drag ....\");\n                const {point,index} = evt.target.dataset;\n                const pointCoordinates = getSelectedPoint(point,index);\n               const offset = getMousePosition(evt);\n                offset.x -= pointCoordinates.x;\n                offset.y -= pointCoordinates.y;\n                console.log(offset);\n                setSelectedPoint({\n                    point,index,offset\n                })\n            }\n        }\n    \n       , [setSelectedPoint]\n    )\n\n\n    const drag = useCallback(\n        (evt)=>{\n            console.log(\"drag ....\");\n            console.log(selectedPoint)\n            if (selectedPoint ) {\n                evt.preventDefault();\n                const position = getMousePosition(evt);\n                const {point,index,offset} = selectedPoint;\n                const actualPoint = getSelectedPoint(point,index)\n                actualPoint.x = position.x - offset.x;\n                actualPoint.y = position.y - offset.y;\n                console.log(linePoints)\n                setLinePoints(prevPoints => [...prevPoints]);\n            }\n        },\n        [selectedPoint,getMousePosition]\n    )\n\n\n    const endDrag = useCallback(\n        (evt)=> {\n            console.log(\"end drag ....\");\n            boardRef.current.removeEventListener('mousemove',drag);\n        },\n        [boardRef,drag],\n    )\n\n    useEffect(() => {\n        setBoardSize(boardRef.current.clientHeight);\n        console.log(\"reloaded\")\n        boardRef.current.addEventListener(\"mousedown\", startDrag)\n        boardRef.current.addEventListener(\"mousemove\", drag)\n        boardRef.current.addEventListener(\"mouseup\", endDrag)\n        boardRef.current.addEventListener(\"mouseleave\", endDrag)\n    }, [boardRef,drag,startDrag,endDrag])\n   \n    const result = [];\n    const points = linePoints.map(line => {\n        result.push(line.point_1);\n        result.push(line.point_2);\n    } )\n  \n    return (\n        <div className=\"painter\">\n            <svg ref={boardRef} id=\"mainBoard\" xmlns=\"http://www.w3.org/2000/svg\" className='draw-board'>\n            {/* {linePoints.map((line,index) => {\n                return <Line key={JSON.stringify(line)} {...line} index={index} />\n            })} */}\n            {\n\n            }\n         </svg>\n         <div className=\"actions\">\n             <button >Add Line</button>\n             <button>delete Line</button>\n             <button>submit Graph</button>\n         </div>\n        </div>\n        \n    )\n}\n\n\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Graph/index.jsx",["78"],"\nimport './style.css'\nexport function Line(props){\n    const {point_1, point_2} = props;\n    return (\n        <g fill=\"red\">\n        <circle  cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_1'/>\n        <circle  cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_2'/>\n        <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke='red' className=\"erasable\" />\n        </g>\n        \n    )\n}\n\nexport default function Graph(props) {\n  \n    return (<g>\n        {props.points.map(point=>{\n               <circle  cx={point.x} cy={point.y} r=\"5\" />\n           })}\n    </g>\n\n           \n    )\n}\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/SvgScreen/index.jsx",["79","80"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Timer/index.jsx",["81","82","83"],"import React, { useEffect, useState } from \"react\";\n\nconst Timer = (props) => {\n  const timeRightNow = new Date().getTime();\n\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    const timer = setInterval(function () {\n      const now = new Date().getTime();\n      const deadline = timeRightNow + (props.choosenTime || 10000000);\n      const t = deadline - now;\n      const days = Math.floor(t / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((t % (1000 * 60)) / 1000);\n      const updatedTimer = minutes + \":\" + seconds;\n      setTimer(updatedTimer);\n      if (t < 0) {\n        clearInterval(timer);\n        const timeOut = \"TIME OUT\";\n        setTimer(timeOut);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 30,\n        fontWeight: \"bold\",\n        color: \"#FFF\",\n        boxShadow: \"1px 1px 25px #9E9E9E\",\n        margin: 5,\n        borderWidth: 1,\n        borderColor: \"#9E9E9E\",\n        background: \"#F2AF58\",\n        ...props.style,\n        borderRadius: props.style.height / 2 || 75,\n      }}\n    >\n      <h3>{timer}</h3>\n    </div>\n  );\n};\n\nexport default Timer;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/ExamSteps/index.jsx",["84"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst steps = [\n  { id: 1, text: \"Exam 1\", step: \"Step 1\" },\n  { id: 2, text: \"Exam 2\", step: \"Step 2\" },\n  { id: 3, text: \"Exam 3\", step: \"Step 3\" },\n  { id: 4, text: \"Exam 4\", step: \"Step 4\" },\n  { id: 5, text: \"Exam 5\", step: \"Step 5\" },\n];\n\nfunction getSteps() {\n  return steps.map((step) => step.step);\n}\n\nfunction getStepContent(step) {\n  steps.find((stp) => stp.id === step);\n}\n\nexport default function ExamSteps() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = (step) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>\n              {getStepContent(activeStep)}\n            </Typography>\n            <div>\n              <Button\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                className={classes.button}\n              >\n                Back\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"85","severity":1,"message":"86","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":11},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"85","severity":1,"message":"93","line":2,"column":8,"nodeType":"87","messageId":"88","endLine":2,"endColumn":17},{"ruleId":"85","severity":1,"message":"94","line":2,"column":21,"nodeType":"87","messageId":"88","endLine":2,"endColumn":31},{"ruleId":"85","severity":1,"message":"95","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":19},{"ruleId":"85","severity":1,"message":"96","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":13},{"ruleId":"85","severity":1,"message":"97","line":2,"column":25,"nodeType":"87","messageId":"88","endLine":2,"endColumn":34},{"ruleId":"85","severity":1,"message":"98","line":10,"column":10,"nodeType":"87","messageId":"88","endLine":10,"endColumn":15},{"ruleId":"85","severity":1,"message":"99","line":10,"column":17,"nodeType":"87","messageId":"88","endLine":10,"endColumn":25},{"ruleId":"100","severity":1,"message":"101","line":41,"column":6,"nodeType":"102","endLine":41,"endColumn":19,"suggestions":"103"},{"ruleId":"85","severity":1,"message":"104","line":2,"column":11,"nodeType":"87","messageId":"88","endLine":2,"endColumn":15},{"ruleId":"85","severity":1,"message":"105","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":18},{"ruleId":"85","severity":1,"message":"106","line":10,"column":7,"nodeType":"87","messageId":"88","endLine":10,"endColumn":17},{"ruleId":"85","severity":1,"message":"107","line":11,"column":7,"nodeType":"87","messageId":"88","endLine":11,"endColumn":18},{"ruleId":"85","severity":1,"message":"108","line":16,"column":12,"nodeType":"87","messageId":"88","endLine":16,"endColumn":21},{"ruleId":"85","severity":1,"message":"109","line":17,"column":12,"nodeType":"87","messageId":"88","endLine":17,"endColumn":18},{"ruleId":"85","severity":1,"message":"110","line":17,"column":19,"nodeType":"87","messageId":"88","endLine":17,"endColumn":28},{"ruleId":"100","severity":1,"message":"111","line":85,"column":10,"nodeType":"102","endLine":85,"endColumn":28,"suggestions":"112"},{"ruleId":"100","severity":1,"message":"113","line":104,"column":9,"nodeType":"102","endLine":104,"endColumn":41,"suggestions":"114"},{"ruleId":"85","severity":1,"message":"115","line":126,"column":11,"nodeType":"87","messageId":"88","endLine":126,"endColumn":17},{"ruleId":"116","severity":1,"message":"117","line":126,"column":40,"nodeType":"118","messageId":"119","endLine":126,"endColumn":42},{"ruleId":"116","severity":1,"message":"117","line":18,"column":32,"nodeType":"118","messageId":"119","endLine":18,"endColumn":34},{"ruleId":"85","severity":1,"message":"120","line":4,"column":25,"nodeType":"87","messageId":"88","endLine":4,"endColumn":35},{"ruleId":"121","severity":1,"message":"122","line":55,"column":1,"nodeType":"123","messageId":"124","endLine":96,"endColumn":2},{"ruleId":"85","severity":1,"message":"125","line":13,"column":13,"nodeType":"87","messageId":"88","endLine":13,"endColumn":17},{"ruleId":"85","severity":1,"message":"126","line":14,"column":13,"nodeType":"87","messageId":"88","endLine":14,"endColumn":18},{"ruleId":"100","severity":1,"message":"127","line":27,"column":6,"nodeType":"102","endLine":27,"endColumn":8,"suggestions":"128"},{"ruleId":"85","severity":1,"message":"129","line":67,"column":9,"nodeType":"87","messageId":"88","endLine":67,"endColumn":19},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["130"],"no-negated-in-lhs",["131"],"'DrawBoard' is defined but never used.","'DrawBoard2' is defined but never used.","'AnswerField' is defined but never used.","'Graph' is defined but never used.","'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.","ArrayExpression",["132"],"'Line' is defined but never used.","'distance' is defined but never used.","'deleteLine' is assigned a value but never used.","'submitGraph' is assigned a value but never used.","'boardSize' is assigned a value but never used.","'action' is assigned a value but never used.","'setAction' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getMousePosition' and 'getSelectedPoint'. Either include them or remove the dependency array.",["133"],"React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'linePoints'. Either include them or remove the dependency array.",["134"],"'points' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'handleLine' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'days' is assigned a value but never used.","'hours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.choosenTime' and 'timeRightNow'. Either include them or remove the dependency array.",["135"],"'handleSkip' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},"Update the dependencies array to be: [currentLine, lines]",{"range":"144","text":"145"},"Update the dependencies array to be: [getMousePosition, getSelectedPoint]",{"range":"146","text":"147"},"Update the dependencies array to be: [selectedPoint, getMousePosition, getSelectedPoint, linePoints]",{"range":"148","text":"149"},"Update the dependencies array to be: [props.choosenTime, timeRightNow]",{"range":"150","text":"151"},[1120,1133],"[currentLine, lines]",[2265,2283],"[getMousePosition, getSelectedPoint]",[2915,2947],"[selectedPoint, getMousePosition, getSelectedPoint, linePoints]",[909,911],"[props.choosenTime, timeRightNow]"]