[{"/Users/alaabashiyi/Desktop/webahead-projects/organization-of-points/src/utils/boardUtils.js":"1","/Users/alaabashiyi/Desktop/webahead-projects/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx":"2","/Users/alaabashiyi/Desktop/webahead-projects/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"3"},{"size":948,"mtime":1611145729891,"results":"4","hashOfConfig":"5"},{"size":1791,"mtime":1611136369075,"results":"6","hashOfConfig":"5"},{"size":4708,"mtime":1611136450128,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vx59yq",{"filePath":"10","messages":"11","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/alaabashiyi/Desktop/webahead-projects/organization-of-points/src/utils/boardUtils.js",[],"/Users/alaabashiyi/Desktop/webahead-projects/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx",["15","16","17","18"],"/Users/alaabashiyi/Desktop/webahead-projects/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["19","20","21","22","23"],"import React, { useRef, useState, useEffect } from \"react\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\nimport RotateRightIcon from \"@material-ui/icons/RotateRight\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\nimport Timer from \"../../../components/Timer\";\nimport ExamSteps from \"../../../components/ExamSteps\";\nimport { lines } from \"../../../utils/consts\";\nimport \"../style.css\";\n\nfunction AnswerField(props) {\n  const svgRef = useRef();\n  //states\n  const [rotateAngle, setRotateAngle] = useState(0);\n  const [lines, setLines] = useState([]);\n  const [currentLine, setCurrentLine] = useState({\n    point1: null,\n    point2: null,\n  });\n  const [action, setAction] = useState(\"add\");\n\n  //useEffect\n  useEffect(() => {\n    console.log(currentLine);\n\n    if (currentLine.point1 && currentLine.point2) {\n      const reversedLine = {\n        point1: currentLine.point2,\n        point2: currentLine.point1,\n      };\n      if (\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(currentLine)) &&\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(reversedLine))\n      ) {\n        setLines((prev) => {\n          return [...prev, currentLine];\n        });\n      }\n\n      setCurrentLine({ point1: null, point2: null });\n    }\n  }, [currentLine]);\n\n  // handlers\n  const handleLineClick = (event) => {\n    console.log(action);\n    if (action === \"delete\") {\n      console.log(event.target.dataset);\n      const index = event.target.dataset.index;\n      setLines((prev) => {\n        prev[index] = \"deleted\";\n        return prev.filter((line) => line !== \"deleted\");\n      });\n    }\n  };\n\n  const handleAction = (event) => {\n    console.log(\"Action...\", event.target.name);\n    setAction(event.target.name);\n  };\n\n  const handleCircleClick = (event) => {\n    const point = {\n      x: event.target.getAttribute(\"cx\"),\n      y: event.target.getAttribute(\"cy\"),\n    };\n    if (currentLine.point1 === null) {\n      setCurrentLine({ point1: point, point2: null });\n      return;\n    }\n    if (JSON.stringify(currentLine.point1) !== JSON.stringify(point)) {\n      setCurrentLine((prev) => {\n        return { ...prev, point2: point };\n      });\n    }\n\n    console.log(point);\n  };\n\n  const handleLeftRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle - 10);\n  };\n\n  const handleRightRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle + 10);\n  };\n  return (\n    <div className=\"answer-board-tools\">\n      <div className={props.className[0]}>\n        <svg\n          ref={svgRef}\n          className={`${\n            props.className[1] ? props.className[1] : \"question-branch-paper\"\n          } add-cursor`}\n          transform={`rotate(${rotateAngle},0,0)`}\n        >\n          <g>\n            {lines.map((l, index) => {\n              return (\n                <line\n                  key={index}\n                  x1={l.point1.x}\n                  y1={l.point1.y}\n                  x2={l.point2.x}\n                  y2={l.point2.y}\n                  strokeWidth=\"3\"\n                  stroke=\"green\"\n                  data-index={index}\n                  className={`graph-line ${\n                    action === \"delete\" ? \"delete-cursor\" : \"add-cursor\"\n                  }`}\n                  onClick={handleLineClick}\n                />\n              );\n            })}\n            {props.points.map((point, index) => {\n              return (\n                <circle\n                  key={index}\n                  cx={point.x}\n                  cy={point.y}\n                  r=\"10\"\n                  fill=\"red\"\n                  onClick={handleCircleClick}\n                />\n              );\n            })}\n          </g>\n        </svg>\n      </div>\n\n      <div className=\"tools\">\n        <IconButton aria-label=\"left\" onClick={handleLeftRotate}>\n          <RotateLeftIcon style={{ fontSize: 40 }} />\n        </IconButton>\n\n        <IconButton aria-label=\"right\" onClick={handleRightRotate}>\n          <RotateRightIcon style={{ fontSize: 40 }} />\n        </IconButton>\n        <IconButton\n          aria-label=\"erase\"\n          name=\"delete\"\n          onClick={(e) => {\n            e.target.name = \"delete\";\n            handleAction(e);\n          }}\n        >\n          <DeleteSweepIcon style={{ fontSize: 40 }} />\n        </IconButton>\n\n        <IconButton aria-label=\"add\" name=\"add\" onClick={handleAction}>\n          <LinearScaleIcon style={{ fontSize: 40 }} />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default AnswerField;\n",{"ruleId":"24","severity":1,"message":"25","line":2,"column":10,"nodeType":"26","messageId":"27","endLine":2,"endColumn":16},{"ruleId":"24","severity":1,"message":"28","line":5,"column":8,"nodeType":"26","messageId":"27","endLine":5,"endColumn":22},{"ruleId":"24","severity":1,"message":"29","line":6,"column":8,"nodeType":"26","messageId":"27","endLine":6,"endColumn":23},{"ruleId":"24","severity":1,"message":"30","line":13,"column":7,"nodeType":"26","messageId":"27","endLine":13,"endColumn":19},{"ruleId":"24","severity":1,"message":"25","line":2,"column":10,"nodeType":"26","messageId":"27","endLine":2,"endColumn":16},{"ruleId":"24","severity":1,"message":"31","line":7,"column":8,"nodeType":"26","messageId":"27","endLine":7,"endColumn":13},{"ruleId":"24","severity":1,"message":"32","line":8,"column":8,"nodeType":"26","messageId":"27","endLine":8,"endColumn":17},{"ruleId":"24","severity":1,"message":"33","line":9,"column":10,"nodeType":"26","messageId":"27","endLine":9,"endColumn":15},{"ruleId":"34","severity":1,"message":"35","line":47,"column":6,"nodeType":"36","endLine":47,"endColumn":19,"suggestions":"37"},"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'RotateLeftIcon' is defined but never used.","'RotateRightIcon' is defined but never used.","'currentShape' is assigned a value but never used.","'Timer' is defined but never used.","'ExamSteps' is defined but never used.","'lines' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.","ArrayExpression",["38"],{"desc":"39","fix":"40"},"Update the dependencies array to be: [currentLine, lines]",{"range":"41","text":"42"},[1469,1482],"[currentLine, lines]"]