[{"/home/ammar/organization-of-points/src/index.js":"1","/home/ammar/organization-of-points/src/App.js":"2","/home/ammar/organization-of-points/src/components/AppTest.js":"3","/home/ammar/organization-of-points/src/utils/useMousePosition.js":"4","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx":"5","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx":"6","/home/ammar/organization-of-points/src/components/Graph/index.jsx":"7","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"8"},{"size":215,"mtime":1610913495795,"results":"9","hashOfConfig":"10"},{"size":2003,"mtime":1611055683686,"results":"11","hashOfConfig":"10"},{"size":259,"mtime":1611055683690,"results":"12","hashOfConfig":"10"},{"size":511,"mtime":1610913495823,"results":"13","hashOfConfig":"10"},{"size":6237,"mtime":1611059858860,"results":"14","hashOfConfig":"10"},{"size":2528,"mtime":1610374239857,"results":"15","hashOfConfig":"10"},{"size":722,"mtime":1611055683698,"results":"16","hashOfConfig":"10"},{"size":4621,"mtime":1611055683706,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"gw6x7x",{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"21"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"21"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"21"},"/home/ammar/organization-of-points/src/index.js",["41"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["42","43"],"/home/ammar/organization-of-points/src/App.js",["44","45","46","47"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n","/home/ammar/organization-of-points/src/components/AppTest.js",["48","49"],"import React from \"react\";\nimport DrawBoard from \"./DrawBoard\";\nimport AnswerField from \"../screens/TestScreen/components/AnswerField\";\nimport Graph from \"./Graph\";\nimport \"./style.css\";\nexport default function AppTest() {\n  return <DrawBoard></DrawBoard>;\n}\n","/home/ammar/organization-of-points/src/utils/useMousePosition.js",[],"/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx",["50","51","52","53","54","55","56","57","58"],"/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx",["59","60"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/ammar/organization-of-points/src/components/Graph/index.jsx",["61"],"\nimport './style.css'\nexport function Line(props){\n    const {point_1, point_2} = props;\n    return (\n        <g fill={props.fill}>\n        <circle  cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_1'/>\n        <circle  cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_2'/>\n        <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke={props.fill}/>\n        </g>\n        \n    )\n}\n\nexport default function Graph(props) {\n  \n    return (<g>\n        {props.points.map(point=>{\n               <circle  cx={point.x} cy={point.y} r=\"5\" />\n           })}\n    </g>\n\n           \n    )\n}\n","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["62"],"import React, { useRef, useState, useEffect } from \"react\";\nimport \"../style.css\";\n\nfunction AnswerField(props) {\n    const svgRef = useRef();\n    //states\n    const [rotateAngle, setRotateAngle] = useState(0);\n    const [lines, setLines] = useState([]);\n    const [currentLine, setCurrentLine] = useState({\n        point1: null,\n        point2: null,\n    });\n    const [action, setAction] = useState(\"add\");\n\n    //useEffect\n    useEffect(() => {\n        console.log(currentLine);\n\n        if (currentLine.point1 && currentLine.point2) {\n            const reversedLine = {\n                point1: currentLine.point2,\n                point2: currentLine.point1,\n            };\n            if (\n                !lines\n                    .map((line) => JSON.stringify(line))\n                    .includes(JSON.stringify(currentLine)) &&\n                !lines\n                    .map((line) => JSON.stringify(line))\n                    .includes(JSON.stringify(reversedLine))\n            ) {\n                setLines((prev) => {\n                    return [...prev, currentLine];\n                });\n            }\n\n            setCurrentLine({ point1: null, point2: null });\n        }\n    }, [currentLine]);\n\n    // useEffect(() => {\n    //     svgRef.current.classList.toggle(\"delete-cursor\");\n    //     svgRef.current.classList.toggle(\"add-cursor\");\n    // }, [action]);\n\n    // handlers\n    const handleLineClick = (event) => {\n        console.log(action);\n        if (action === \"delete\") {\n            console.log(event.target.dataset);\n            const index = event.target.dataset.index;\n            setLines((prev) => {\n                prev[index] = \"deleted\";\n                return prev.filter((line) => line !== \"deleted\");\n            });\n        }\n    };\n\n    const handleAction = (event) => {\n        console.log(\"Action...\",event.target.name)\n        setAction(event.target.name);\n    };\n\n    const handleCircleClick = (event) => {\n        const point = {\n            x: event.target.getAttribute(\"cx\"),\n            y: event.target.getAttribute(\"cy\"),\n        };\n        if (currentLine.point1 === null) {\n            setCurrentLine({ point1: point, point2: null });\n            return;\n        }\n        if (JSON.stringify(currentLine.point1) !== JSON.stringify(point)) {\n            setCurrentLine((prev) => {\n                return { ...prev, point2: point };\n            });\n        }\n\n        console.log(point);\n    };\n\n    const handleLeftRotate = (event) => {\n        setRotateAngle(prevangle => prevangle - 10)\n    }\n\n    const handleRightRotate = (event) => {\n        setRotateAngle(prevangle => prevangle + 10)\n    }\n    return (\n        <div>\n            <svg ref={svgRef} className=\"question-branch-paper add-cursor\">\n                <g transform={`rotate(${rotateAngle},150,150)`}>\n                    {lines.map((l, index) => {\n                        return (\n                            <line\n                                key={index}\n                                x1={l.point1.x}\n                                y1={l.point1.y}\n                                x2={l.point2.x}\n                                y2={l.point2.y}\n                                strokeWidth=\"3\"\n                                stroke=\"green\"\n                                data-index={index}\n                                className={`graph-line ${action === 'delete' ? 'delete-cursor':'add-cursor'}`}\n                                onClick={handleLineClick}\n                            />\n                        );\n                    })}\n                    {props.points.map((point, index) => {\n                        return (\n                            <circle\n                                key={index}\n                                cx={point.x}\n                                cy={point.y}\n                                r=\"10\"\n                                fill=\"red\"\n                                onClick={handleCircleClick}\n                            />\n                        );\n                    })}\n                </g>\n            </svg>\n            <div className=\"tools\">\n                <button className=\"tool-btn\" onClick={handleLeftRotate}>left Rotate</button>\n                <button className=\"tool-btn\" onClick={handleRightRotate}>right Rotate</button>\n                <button className=\"tool-btn\" name=\"delete\" onClick={handleAction}>\n          erase\n        </button>\n                <button className=\"tool-btn\" name=\"add\" onClick={handleAction}>\n                    line\n        </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AnswerField;\n",{"ruleId":"63","severity":1,"message":"64","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":11},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"63","severity":1,"message":"71","line":2,"column":25,"nodeType":"65","messageId":"66","endLine":2,"endColumn":34},{"ruleId":"63","severity":1,"message":"72","line":10,"column":10,"nodeType":"65","messageId":"66","endLine":10,"endColumn":15},{"ruleId":"63","severity":1,"message":"73","line":10,"column":17,"nodeType":"65","messageId":"66","endLine":10,"endColumn":25},{"ruleId":"74","severity":1,"message":"75","line":74,"column":1,"nodeType":"76","messageId":"77","endLine":85,"endColumn":2},{"ruleId":"63","severity":1,"message":"78","line":3,"column":8,"nodeType":"65","messageId":"66","endLine":3,"endColumn":19},{"ruleId":"63","severity":1,"message":"79","line":4,"column":8,"nodeType":"65","messageId":"66","endLine":4,"endColumn":13},{"ruleId":"63","severity":1,"message":"80","line":18,"column":12,"nodeType":"65","messageId":"66","endLine":18,"endColumn":21},{"ruleId":"63","severity":1,"message":"81","line":19,"column":12,"nodeType":"65","messageId":"66","endLine":19,"endColumn":18},{"ruleId":"63","severity":1,"message":"82","line":19,"column":19,"nodeType":"65","messageId":"66","endLine":19,"endColumn":28},{"ruleId":"83","severity":1,"message":"84","line":72,"column":7,"nodeType":"85","endLine":72,"endColumn":17,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"87","line":90,"column":10,"nodeType":"85","endLine":90,"endColumn":45,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"84","line":109,"column":9,"nodeType":"85","endLine":109,"endColumn":58,"suggestions":"89"},{"ruleId":"63","severity":1,"message":"90","line":118,"column":34,"nodeType":"65","messageId":"66","endLine":118,"endColumn":40},{"ruleId":"83","severity":1,"message":"91","line":138,"column":9,"nodeType":"85","endLine":138,"endColumn":38,"suggestions":"92"},{"ruleId":"83","severity":1,"message":"93","line":152,"column":8,"nodeType":"85","endLine":152,"endColumn":23,"suggestions":"94"},{"ruleId":"63","severity":1,"message":"95","line":4,"column":25,"nodeType":"65","messageId":"66","endLine":4,"endColumn":35},{"ruleId":"74","severity":1,"message":"75","line":55,"column":1,"nodeType":"76","messageId":"77","endLine":96,"endColumn":2},{"ruleId":"96","severity":1,"message":"97","line":18,"column":32,"nodeType":"98","messageId":"99","endLine":18,"endColumn":34},{"ruleId":"83","severity":1,"message":"100","line":39,"column":8,"nodeType":"85","endLine":39,"endColumn":21,"suggestions":"101"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["102"],"no-negated-in-lhs",["103"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'AnswerField' is defined but never used.","'Graph' is defined but never used.","'boardSize' is assigned a value but never used.","'action' is assigned a value but never used.","'setAction' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'lines'. Either include it or remove the dependency array.","ArrayExpression",["104"],"React Hook useCallback has a missing dependency: 'getMousePosition'. Either include it or remove the dependency array.",["105"],["106"],"'offset' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'lines'. Either include them or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'drag'. Either include it or remove the dependency array.",["108"],"'handleLine' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [lines]",{"range":"122","text":"123"},"Update the dependencies array to be: [getSelectedPoint, getMousePosition]",{"range":"124","text":"125"},"Update the dependencies array to be: [selectedPoint, getMousePosition, getSelectedPoint, lines]",{"range":"126","text":"127"},"Update the dependencies array to be: [drag, getSelectedPoint, lines, selectedPoint]",{"range":"128","text":"129"},"Update the dependencies array to be: [drag, selectedPoint]",{"range":"130","text":"131"},"Update the dependencies array to be: [currentLine, lines]",{"range":"132","text":"133"},[1808,1818],"[lines]",[2431,2466],"[getSelectedPoint, getMousePosition]",[3088,3137],"[selectedPoint, getMousePosition, getSelectedPoint, lines]",[4214,4243],"[drag, getSelectedPoint, lines, selectedPoint]",[4747,4762],"[drag, selectedPoint]",[1192,1205],"[currentLine, lines]"]