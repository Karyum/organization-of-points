[{"/home/ammar/organization-of-points/src/index.js":"1","/home/ammar/organization-of-points/src/App.js":"2","/home/ammar/organization-of-points/src/components/AppTest.js":"3","/home/ammar/organization-of-points/src/utils/useMousePosition.js":"4","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx":"5","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx":"6","/home/ammar/organization-of-points/src/components/Graph/index.jsx":"7","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"8","/home/ammar/organization-of-points/src/utils/dataStore.js":"9"},{"size":215,"mtime":1610913495795,"results":"10","hashOfConfig":"11"},{"size":2003,"mtime":1611064906637,"results":"12","hashOfConfig":"11"},{"size":259,"mtime":1611064906641,"results":"13","hashOfConfig":"11"},{"size":511,"mtime":1610913495823,"results":"14","hashOfConfig":"11"},{"size":6432,"mtime":1611130639189,"results":"15","hashOfConfig":"11"},{"size":2528,"mtime":1610374239857,"results":"16","hashOfConfig":"11"},{"size":804,"mtime":1611091906832,"results":"17","hashOfConfig":"11"},{"size":4621,"mtime":1611064906641,"results":"18","hashOfConfig":"11"},{"size":1,"mtime":1611088325669,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"gw6x7x",{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"23"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ammar/organization-of-points/src/index.js",["44"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["45","46"],"/home/ammar/organization-of-points/src/App.js",["47","48","49","50"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n","/home/ammar/organization-of-points/src/components/AppTest.js",["51","52"],"import React from \"react\";\nimport DrawBoard from \"./DrawBoard\";\nimport AnswerField from \"../screens/TestScreen/components/AnswerField\";\nimport Graph from \"./Graph\";\nimport \"./style.css\";\nexport default function AppTest() {\n  return <DrawBoard></DrawBoard>;\n}\n","/home/ammar/organization-of-points/src/utils/useMousePosition.js",[],"/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx",["53","54","55","56","57","58","59","60","61"],"/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx",["62","63"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/ammar/organization-of-points/src/components/Graph/index.jsx",["64","65"],"/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["66"],"import React, { useRef, useState, useEffect } from \"react\";\nimport \"../style.css\";\n\nfunction AnswerField(props) {\n    const svgRef = useRef();\n    //states\n    const [rotateAngle, setRotateAngle] = useState(0);\n    const [lines, setLines] = useState([]);\n    const [currentLine, setCurrentLine] = useState({\n        point1: null,\n        point2: null,\n    });\n    const [action, setAction] = useState(\"add\");\n\n    //useEffect\n    useEffect(() => {\n        console.log(currentLine);\n\n        if (currentLine.point1 && currentLine.point2) {\n            const reversedLine = {\n                point1: currentLine.point2,\n                point2: currentLine.point1,\n            };\n            if (\n                !lines\n                    .map((line) => JSON.stringify(line))\n                    .includes(JSON.stringify(currentLine)) &&\n                !lines\n                    .map((line) => JSON.stringify(line))\n                    .includes(JSON.stringify(reversedLine))\n            ) {\n                setLines((prev) => {\n                    return [...prev, currentLine];\n                });\n            }\n\n            setCurrentLine({ point1: null, point2: null });\n        }\n    }, [currentLine]);\n\n    // useEffect(() => {\n    //     svgRef.current.classList.toggle(\"delete-cursor\");\n    //     svgRef.current.classList.toggle(\"add-cursor\");\n    // }, [action]);\n\n    // handlers\n    const handleLineClick = (event) => {\n        console.log(action);\n        if (action === \"delete\") {\n            console.log(event.target.dataset);\n            const index = event.target.dataset.index;\n            setLines((prev) => {\n                prev[index] = \"deleted\";\n                return prev.filter((line) => line !== \"deleted\");\n            });\n        }\n    };\n\n    const handleAction = (event) => {\n        console.log(\"Action...\",event.target.name)\n        setAction(event.target.name);\n    };\n\n    const handleCircleClick = (event) => {\n        const point = {\n            x: event.target.getAttribute(\"cx\"),\n            y: event.target.getAttribute(\"cy\"),\n        };\n        if (currentLine.point1 === null) {\n            setCurrentLine({ point1: point, point2: null });\n            return;\n        }\n        if (JSON.stringify(currentLine.point1) !== JSON.stringify(point)) {\n            setCurrentLine((prev) => {\n                return { ...prev, point2: point };\n            });\n        }\n\n        console.log(point);\n    };\n\n    const handleLeftRotate = (event) => {\n        setRotateAngle(prevangle => prevangle - 10)\n    }\n\n    const handleRightRotate = (event) => {\n        setRotateAngle(prevangle => prevangle + 10)\n    }\n    return (\n        <div>\n            <svg ref={svgRef} className=\"question-branch-paper add-cursor\">\n                <g transform={`rotate(${rotateAngle},150,150)`}>\n                    {lines.map((l, index) => {\n                        return (\n                            <line\n                                key={index}\n                                x1={l.point1.x}\n                                y1={l.point1.y}\n                                x2={l.point2.x}\n                                y2={l.point2.y}\n                                strokeWidth=\"3\"\n                                stroke=\"green\"\n                                data-index={index}\n                                className={`graph-line ${action === 'delete' ? 'delete-cursor':'add-cursor'}`}\n                                onClick={handleLineClick}\n                            />\n                        );\n                    })}\n                    {props.points.map((point, index) => {\n                        return (\n                            <circle\n                                key={index}\n                                cx={point.x}\n                                cy={point.y}\n                                r=\"10\"\n                                fill=\"red\"\n                                onClick={handleCircleClick}\n                            />\n                        );\n                    })}\n                </g>\n            </svg>\n            <div className=\"tools\">\n                <button className=\"tool-btn\" onClick={handleLeftRotate}>left Rotate</button>\n                <button className=\"tool-btn\" onClick={handleRightRotate}>right Rotate</button>\n                <button className=\"tool-btn\" name=\"delete\" onClick={handleAction}>\n          erase\n        </button>\n                <button className=\"tool-btn\" name=\"add\" onClick={handleAction}>\n                    line\n        </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AnswerField;\n","/home/ammar/organization-of-points/src/utils/dataStore.js",[],{"ruleId":"67","severity":1,"message":"68","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":11},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"67","severity":1,"message":"75","line":2,"column":25,"nodeType":"69","messageId":"70","endLine":2,"endColumn":34},{"ruleId":"67","severity":1,"message":"76","line":10,"column":10,"nodeType":"69","messageId":"70","endLine":10,"endColumn":15},{"ruleId":"67","severity":1,"message":"77","line":10,"column":17,"nodeType":"69","messageId":"70","endLine":10,"endColumn":25},{"ruleId":"78","severity":1,"message":"79","line":74,"column":1,"nodeType":"80","messageId":"81","endLine":85,"endColumn":2},{"ruleId":"67","severity":1,"message":"82","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":19},{"ruleId":"67","severity":1,"message":"83","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":13},{"ruleId":"67","severity":1,"message":"84","line":3,"column":9,"nodeType":"69","messageId":"70","endLine":3,"endColumn":15},{"ruleId":"85","severity":1,"message":"86","line":12,"column":13,"nodeType":"87","messageId":"88","endLine":12,"endColumn":15},{"ruleId":"67","severity":1,"message":"89","line":18,"column":7,"nodeType":"69","messageId":"70","endLine":18,"endColumn":17},{"ruleId":"90","severity":1,"message":"91","line":50,"column":5,"nodeType":"92","endLine":50,"endColumn":15,"suggestions":"93"},{"ruleId":"85","severity":1,"message":"86","line":75,"column":41,"nodeType":"87","messageId":"88","endLine":75,"endColumn":43},{"ruleId":"90","severity":1,"message":"94","line":80,"column":5,"nodeType":"92","endLine":80,"endColumn":50,"suggestions":"95"},{"ruleId":"67","severity":1,"message":"96","line":102,"column":31,"nodeType":"69","messageId":"70","endLine":102,"endColumn":37},{"ruleId":"90","severity":1,"message":"97","line":126,"column":5,"nodeType":"92","endLine":126,"endColumn":36,"suggestions":"98"},{"ruleId":"90","severity":1,"message":"99","line":142,"column":6,"nodeType":"92","endLine":142,"endColumn":21,"suggestions":"100"},{"ruleId":"67","severity":1,"message":"101","line":4,"column":25,"nodeType":"69","messageId":"70","endLine":4,"endColumn":35},{"ruleId":"78","severity":1,"message":"79","line":55,"column":1,"nodeType":"80","messageId":"81","endLine":96,"endColumn":2},{"ruleId":"67","severity":1,"message":"102","line":4,"column":29,"nodeType":"69","messageId":"70","endLine":4,"endColumn":35},{"ruleId":"103","severity":1,"message":"104","line":18,"column":32,"nodeType":"105","messageId":"106","endLine":18,"endColumn":34},{"ruleId":"90","severity":1,"message":"107","line":39,"column":8,"nodeType":"92","endLine":39,"endColumn":21,"suggestions":"108"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["109"],"no-negated-in-lhs",["110"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'AnswerField' is defined but never used.","'Graph' is defined but never used.","'shapes' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'adjustLine' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'lines'. Either include it or remove the dependency array.","ArrayExpression",["111"],"React Hook useCallback has a missing dependency: 'getMousePosition'. Either include it or remove the dependency array.",["112"],"'offset' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'lines'. Either include them or remove the dependency array.",["113"],"React Hook useEffect has a missing dependency: 'drag'. Either include it or remove the dependency array.",["114"],"'handleLine' is assigned a value but never used.","'factor' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.",["115"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [lines]",{"range":"126","text":"127"},"Update the dependencies array to be: [getSelectedPoint, getMousePosition]",{"range":"128","text":"129"},"Update the dependencies array to be: [drag, getSelectedPoint, lines, selectedPoint]",{"range":"130","text":"131"},"Update the dependencies array to be: [drag, selectedPoint]",{"range":"132","text":"133"},"Update the dependencies array to be: [currentLine, lines]",{"range":"134","text":"135"},[1353,1363],"[lines]",[2230,2275],"[getSelectedPoint, getMousePosition]",[3801,3832],"[drag, getSelectedPoint, lines, selectedPoint]",[4259,4274],"[drag, selectedPoint]",[1192,1205],"[currentLine, lines]"]