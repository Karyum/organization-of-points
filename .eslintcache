[{"/home/webahead/Documents/webahead/final-project/organization-of-points/src/index.js":"1","/home/webahead/Documents/webahead/final-project/organization-of-points/src/App.js":"2","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/AppTest.js":"3","/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/useMousePosition.js":"4","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"5","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx":"6","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/SvgScreen/index.jsx":"7","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/DrawBoard/index.jsx":"8","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Graph/index.jsx":"9","/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/consts.js":"10","/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/boardUtils.js":"11","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx":"12","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Timer/index.jsx":"13","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/ExamSteps/index.jsx":"14","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/Result.jsx":"15"},{"size":215,"mtime":1610893843447,"results":"16","hashOfConfig":"17"},{"size":1782,"mtime":1610981059626,"results":"18","hashOfConfig":"17"},{"size":575,"mtime":1611151116506,"results":"19","hashOfConfig":"17"},{"size":511,"mtime":1610893843447,"results":"20","hashOfConfig":"17"},{"size":4716,"mtime":1611145965997,"results":"21","hashOfConfig":"17"},{"size":1924,"mtime":1611146386844,"results":"22","hashOfConfig":"17"},{"size":2528,"mtime":1610448112351,"results":"23","hashOfConfig":"17"},{"size":6433,"mtime":1611135609507,"results":"24","hashOfConfig":"17"},{"size":804,"mtime":1611135609507,"results":"25","hashOfConfig":"17"},{"size":446,"mtime":1611137002184,"results":"26","hashOfConfig":"17"},{"size":948,"mtime":1611146253610,"results":"27","hashOfConfig":"17"},{"size":740,"mtime":1611146987409,"results":"28","hashOfConfig":"17"},{"size":1458,"mtime":1610981059626,"results":"29","hashOfConfig":"17"},{"size":3710,"mtime":1611145965989,"results":"30","hashOfConfig":"17"},{"size":832,"mtime":1611151288348,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"1325t55",{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"35"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/webahead/Documents/webahead/final-project/organization-of-points/src/index.js",["72"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["73","74"],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/App.js",["75","76","77"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/AppTest.js",["78","79","80","81"],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/useMousePosition.js",[],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["82","83","84","85","86","87"],"import React, { useRef, useState, useEffect } from \"react\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\nimport RotateRightIcon from \"@material-ui/icons/RotateRight\";\nimport DeleteSweepIcon from \"@material-ui/icons/DeleteSweep\";\nimport LinearScaleIcon from \"@material-ui/icons/LinearScale\";\nimport Timer from \"../../../components/Timer\";\nimport ExamSteps from \"../../../components/ExamSteps\";\nimport { lines, points } from \"../../../utils/consts\";\nimport \"../style.css\";\n\nfunction AnswerField(props) {\n  const svgRef = useRef();\n  //states\n  const [rotateAngle, setRotateAngle] = useState(0);\n  const [lines, setLines] = useState([]);\n  const [currentLine, setCurrentLine] = useState({\n    point1: null,\n    point2: null,\n  });\n  const [action, setAction] = useState(\"add\");\n\n  //useEffect\n  useEffect(() => {\n    console.log(currentLine);\n\n    if (currentLine.point1 && currentLine.point2) {\n      const reversedLine = {\n        point1: currentLine.point2,\n        point2: currentLine.point1,\n      };\n      if (\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(currentLine)) &&\n        !lines\n          .map((line) => JSON.stringify(line))\n          .includes(JSON.stringify(reversedLine))\n      ) {\n        setLines((prev) => {\n          return [...prev, currentLine];\n        });\n      }\n\n      setCurrentLine({ point1: null, point2: null });\n    }\n  }, [currentLine]);\n\n  // handlers\n  const handleLineClick = (event) => {\n    console.log(action);\n    if (action === \"delete\") {\n      console.log(event.target.dataset);\n      const index = event.target.dataset.index;\n      setLines((prev) => {\n        prev[index] = \"deleted\";\n        return prev.filter((line) => line !== \"deleted\");\n      });\n    }\n  };\n\n  const handleAction = (event) => {\n    console.log(\"Action...\", event.target.name);\n    setAction(event.target.name);\n  };\n\n  const handleCircleClick = (event) => {\n    const point = {\n      x: event.target.getAttribute(\"cx\"),\n      y: event.target.getAttribute(\"cy\"),\n    };\n    if (currentLine.point1 === null) {\n      setCurrentLine({ point1: point, point2: null });\n      return;\n    }\n    if (JSON.stringify(currentLine.point1) !== JSON.stringify(point)) {\n      setCurrentLine((prev) => {\n        return { ...prev, point2: point };\n      });\n    }\n\n    console.log(point);\n  };\n\n  const handleLeftRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle - 10);\n  };\n\n  const handleRightRotate = (event) => {\n    setRotateAngle((prevangle) => prevangle + 10);\n  };\n  return (\n    <div className=\"answer-board-tools\">\n      <div className={props.className[0]}>\n        <svg\n          ref={svgRef}\n          className={`${\n            props.className[1] ? props.className[1] : \"question-branch-paper\"\n          } add-cursor`}\n          transform={`rotate(${rotateAngle},0,0)`}\n        >\n          <g>\n            {lines.map((l, index) => {\n              return (\n                <line\n                  key={index}\n                  x1={l.point1.x}\n                  y1={l.point1.y}\n                  x2={l.point2.x}\n                  y2={l.point2.y}\n                  strokeWidth=\"3\"\n                  stroke=\"green\"\n                  data-index={index}\n                  className={`graph-line ${\n                    action === \"delete\" ? \"delete-cursor\" : \"add-cursor\"\n                  }`}\n                  onClick={handleLineClick}\n                />\n              );\n            })}\n            {props.points.map((point, index) => {\n              return (\n                <circle\n                  key={index}\n                  cx={point.x}\n                  cy={point.y}\n                  r=\"10\"\n                  fill=\"red\"\n                  onClick={handleCircleClick}\n                />\n              );\n            })}\n          </g>\n        </svg>\n      </div>\n\n      <div className=\"tools\">\n        <IconButton aria-label=\"left\" onClick={handleLeftRotate}>\n          <RotateLeftIcon style={{ fontSize: 40 }} />\n        </IconButton>\n\n        <IconButton aria-label=\"right\" onClick={handleRightRotate}>\n          <RotateRightIcon style={{ fontSize: 40 }} />\n        </IconButton>\n        <IconButton\n          aria-label=\"erase\"\n          name=\"delete\"\n          onClick={(e) => {\n            e.target.name = \"delete\";\n            handleAction(e);\n          }}\n        >\n          <DeleteSweepIcon style={{ fontSize: 40 }} />\n        </IconButton>\n\n        <IconButton aria-label=\"add\" name=\"add\" onClick={handleAction}>\n          <LinearScaleIcon style={{ fontSize: 40 }} />\n        </IconButton>\n      </div>\n    </div>\n  );\n}\n\nexport default AnswerField;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx",["88","89","90"],"import React from \"react\";\nimport { lines, points } from \"../../../utils/consts\";\nimport { Button, IconButton } from \"@material-ui/core\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\nimport RotateRightIcon from \"@material-ui/icons/RotateRight\";\nimport ExamSteps from \"../../../components/ExamSteps\";\nimport shapes from \"../../../data/data.json\";\nimport ShapesInfo from \"./ShapesInfo\";\nimport { adjustShapeToBoard ,getShapePoints} from \"../../../utils/boardUtils\";\nimport AnswerField from \"./AnswerField\";\n\nconst currentShape = adjustShapeToBoard(shapes[4], 240);\nconst currentShapePoints = getShapePoints(currentShape)\n\nfunction QuestionField() {\n  return (\n    <div className=\"main-question-container\">\n      <ExamSteps />\n      <div className=\"question-section\">\n        <div className=\"question-timer\">\n          <div className=\"question\">\n            <svg className=\"shapes\">\n              <ShapesInfo linesArr={lines} />\n            </svg>\n            <svg className=\"shapes\">\n              <ShapesInfo pointsArr={points} />\n            </svg>\n          </div>\n        </div>\n        <div className=\"answer-section\">\n          <IconButton\n            aria-label=\"previous\"\n            style={{ dropShadow: \"1px 3px 19px #9e9e9e\" }}\n          >\n            <ChevronLeftIcon style={{ fontSize: 40 }} />\n          </IconButton>\n          <AnswerField\n            className={[\"svg-draw-container\", \"shapes solution\"]}\n            points={\n              currentShapePoints\n            }\n          />\n\n          <IconButton\n            aria-label=\"next\"\n            style={{ dropShadow: \"1px 3px 19px #9e9e9e\" }}\n          >\n            <ChevronRightIcon style={{ fontSize: 40 }} />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionField;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/SvgScreen/index.jsx",["91","92"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/DrawBoard/index.jsx",["93","94","95","96","97","98","99","100","101"],"import React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Line } from \"../Graph\";\nimport {shapes} from '../../utils/boardUtils'\nimport \"./style.css\";\n\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction normalizePoint(point, factor){\n  const {x,y} = point;\n  if(factor != 0){\n    return{x: x/factor, y:y/factor}\n  }\n}\n\nconst addLine = \"add\";\nconst adjustLine = \"adjust\";\nconst deleteLine = \"delete\";\nconst submitGraph = \"submit\";\nconst minTwoPointsDistance = 20;\n\nexport default function DrawBoard(props) {\n  const boardRef = useRef();\n  const [boardSize, setBoardSize] = useState(0);\n  const [isDeleteActive, SetDeleteActivion] = useState(false);\n  const [linesNum, setLinesNum] = useState(3);\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  const [lines, setlines] = useState([]);\n\n  const getMousePosition = useCallback(\n    (evt) => {\n      const point = boardRef.current.createSVGPoint();\n      point.x = evt.clientX;\n      point.y = evt.clientY;\n      const {x,y} = point.matrixTransform(\n        boardRef.current.getScreenCTM().inverse()\n      );\n      return {x,y};\n    },\n    [boardRef]\n  );\n\n  const getSelectedPoint = useCallback(\n    (point, index) => {\n      if (index < lines.length) {\n        return lines[index][point];\n      }\n    },\n    [linesNum]\n  );\n\n  const startDrag = useCallback(\n    (evt) => {\n      if (evt.target.classList.contains(\"draggable\")) {\n        console.log(\"start drag ....\");\n        const { point, index } = evt.target.dataset;\n        const pointCoordinates = getSelectedPoint(point, index);\n        if (pointCoordinates) {\n          const offset = getMousePosition(evt);\n          offset.x -= pointCoordinates.x;\n          offset.y -= pointCoordinates.y;\n          console.log(offset);\n          setSelectedPoint({\n            point,\n            index,\n            offset,\n          });\n        }\n      } else if (evt.target.classList.contains(\"erasable\")) {\n        console.log(\"object is erasable...\");\n        const index = evt.target.dataset.index;\n        setlines(prev =>{\n          console.log(prev)\n          return prev.filter((_,i) => i != index);\n        })\n      }\n    },\n\n    [setSelectedPoint, getSelectedPoint,setlines]\n  );\n\n  const drag = useCallback(\n    (evt) => {\n      if (selectedPoint) {\n        evt.preventDefault();\n        const position = getMousePosition(evt);\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        actualPoint.x = position.x - offset.x;\n        actualPoint.y = position.y - offset.y;\n        setlines((prevPoints) => [...prevPoints]);\n      }\n    },\n    [selectedPoint, getMousePosition, getSelectedPoint]\n  );\n\n  const endDrag = useCallback(\n    (evt) => {\n      boardRef.current.removeEventListener(\"mousemove\", drag);\n      if (selectedPoint) {\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        if (actualPoint) {\n          let closestPointFound = false;\n          lines.forEach((line, index) => {\n            if (!closestPointFound) {\n              if (distance(actualPoint, line.point_1) < minTwoPointsDistance) {\n                actualPoint.x = line.point_1.x;\n                actualPoint.y = line.point_1.y;\n                closestPointFound = true;\n              } else if (\n                distance(actualPoint, line.point_2) < minTwoPointsDistance\n              ) {\n                actualPoint.x = line.point_2.x;\n                actualPoint.y = line.point_2.y;\n                closestPointFound = true;\n              }\n            }\n          });\n          setlines((prevPoints) => [...prevPoints]);\n        }\n        setSelectedPoint(null)\n      }\n    },\n    [boardRef, drag, selectedPoint]\n  );\n\n    useEffect(() => {\n      setBoardSize(boardRef.current.clientHeight);\n    }, [])\n  \n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousedown\", startDrag);\n    boardRef.current.addEventListener(\"mouseup\", endDrag);\n    boardRef.current.addEventListener(\"mouseleave\", endDrag);\n  }, [boardRef, drag, startDrag, endDrag]);\n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousemove\", drag);\n  }, [selectedPoint]);\n\n  // tool handlers\n\n  const handleAddLine = (event) => {\n    const newLine = {\n      point_1: {\n        x: 20,\n        y: 280,\n      },\n      point_2: {\n        x: 20,\n        y: 240,\n      },\n    };\n\n    setlines((prev) => {\n      prev.push({ ...newLine });\n      return [...prev];\n    });\n\n    setLinesNum((prev) => prev + 1);\n    SetDeleteActivion(false);\n  };\n\n  const handleDeleteLine = (event) => {\n    console.log(\"delete activated...\");\n    SetDeleteActivion(true);\n  };\n\n  const handleClear = (event) => { \n    setlines([]); \n  };\n\n  const handleSubmitGraph = (event) => { \n    const myStorage = window.localStorage;\n    const normalizedLines = [...lines].map(line => {\n      let {point_1,point_2} = line;\n      point_1=normalizePoint(point_1,boardSize);\n      point_2=normalizePoint(point_2,boardSize);\n      return{point_1,point_2};\n    })\n    let shapes = myStorage.getItem('myShapes');\n    if(shapes){\n      shapes = JSON.parse(shapes);\n      shapes.push(normalizedLines);\n      myStorage.setItem(\"myShapes\",JSON.stringify(shapes));\n      return;\n    }\n    shapes = [];\n    shapes.push(normalizedLines);\n    myStorage.setItem('myShapes',JSON.stringify(shapes));\n  };\n  return (\n    <div className=\"painter\">\n      <svg\n        ref={boardRef}\n        id=\"mainBoard\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"draw-board\"\n      >\n        {lines.map((line, index) => {\n          return (\n            <Line\n              key={JSON.stringify(line) + index}\n              {...line}\n              index={index}\n              fill={index === lines.length - 1 ? \"blue\" : \"red\"}\n              deleteLine={isDeleteActive}\n            />\n          );\n        })}\n      </svg>\n      <div className=\"actions\">\n        <button name={addLine} onClick={handleAddLine}>\n          Add Line\n        </button>\n        <button name={deleteLine} onClick={handleDeleteLine}>\n          delete Line\n        </button>\n        <button name={deleteLine} onClick={handleClear}>\n          clear all\n        </button>\n        <button name={submitGraph} onClick={handleSubmitGraph}>\n          submit Graph\n        </button>\n      </div>\n    </div>\n  );\n}\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Graph/index.jsx",["102","103"],"\nimport './style.css'\nexport function Line(props){\n    const {point_1, point_2,factor} = props;\n    return (\n        <g fill={props.fill}>\n        <circle  cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_1'/>\n        <circle  cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_2'/>\n        <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke={props.fill} data-index={props.index} className={props.deleteLine? 'erasable':'normal'}/>\n        </g>\n        \n    )\n}\n\nexport default function Graph(props) {\n  \n    return (<g>\n        {props.points.map(point=>{\n               <circle  cx={point.x} cy={point.y} r=\"5\" />\n           })}\n    </g>\n\n           \n    )\n}\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/consts.js",[],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/utils/boardUtils.js",[],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx",[],"/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/Timer/index.jsx",["104","105","106"],"import React, { useEffect, useState } from \"react\";\n\nconst Timer = (props) => {\n  const timeRightNow = new Date().getTime();\n\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    const timer = setInterval(function () {\n      const now = new Date().getTime();\n      const deadline = timeRightNow + (props.choosenTime || 10000000);\n      const t = deadline - now;\n      const days = Math.floor(t / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((t % (1000 * 60)) / 1000);\n      const updatedTimer = minutes + \":\" + seconds;\n      setTimer(updatedTimer);\n      if (t < 0) {\n        clearInterval(timer);\n        const timeOut = \"TIME OUT\";\n        setTimer(timeOut);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 30,\n        fontWeight: \"bold\",\n        color: \"#FFF\",\n        boxShadow: \"1px 1px 25px #9E9E9E\",\n        margin: 5,\n        borderWidth: 1,\n        borderColor: \"#9E9E9E\",\n        background: \"#F2AF58\",\n        ...props.style,\n        borderRadius: props.style.height / 2 || 75,\n      }}\n    >\n      <h3>{timer}</h3>\n    </div>\n  );\n};\n\nexport default Timer;\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/components/ExamSteps/index.jsx",["107","108"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst steps = [\n  { id: 1, text: \"Exam 1\", step: \"Step 1\" },\n  { id: 2, text: \"Exam 2\", step: \"Step 2\" },\n  { id: 3, text: \"Exam 3\", step: \"Step 3\" },\n  { id: 4, text: \"Exam 4\", step: \"Step 4\" },\n  { id: 5, text: \"Exam 5\", step: \"Step 5\" },\n];\n\nfunction getSteps() {\n  return steps.map((step) => step.step);\n}\n\nfunction getStepContent(step) {\n  steps.find((stp) => stp.id === step);\n}\n\nexport default function ExamSteps() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = (step) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>\n              {getStepContent(activeStep)}\n            </Typography>\n            <div>\n              <Button\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                className={classes.button}\n              >\n                Back\n              </Button>\n              {/* <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n              </Button> */}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/webahead/Documents/webahead/final-project/organization-of-points/src/screens/TestScreen/components/Result.jsx",["109"],{"ruleId":"110","severity":1,"message":"111","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":11},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","replacedBy":"117"},{"ruleId":"110","severity":1,"message":"118","line":2,"column":25,"nodeType":"112","messageId":"113","endLine":2,"endColumn":34},{"ruleId":"110","severity":1,"message":"119","line":10,"column":10,"nodeType":"112","messageId":"113","endLine":10,"endColumn":15},{"ruleId":"110","severity":1,"message":"120","line":10,"column":17,"nodeType":"112","messageId":"113","endLine":10,"endColumn":25},{"ruleId":"110","severity":1,"message":"121","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":17},{"ruleId":"110","severity":1,"message":"122","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":19},{"ruleId":"110","severity":1,"message":"123","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":13},{"ruleId":"110","severity":1,"message":"124","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":21},{"ruleId":"110","severity":1,"message":"125","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"126","line":7,"column":8,"nodeType":"112","messageId":"113","endLine":7,"endColumn":13},{"ruleId":"110","severity":1,"message":"127","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":17},{"ruleId":"110","severity":1,"message":"128","line":9,"column":10,"nodeType":"112","messageId":"113","endLine":9,"endColumn":15},{"ruleId":"110","severity":1,"message":"129","line":9,"column":17,"nodeType":"112","messageId":"113","endLine":9,"endColumn":23},{"ruleId":"130","severity":1,"message":"131","line":47,"column":6,"nodeType":"132","endLine":47,"endColumn":19,"suggestions":"133"},{"ruleId":"110","severity":1,"message":"125","line":3,"column":10,"nodeType":"112","messageId":"113","endLine":3,"endColumn":16},{"ruleId":"110","severity":1,"message":"134","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":22},{"ruleId":"110","severity":1,"message":"135","line":7,"column":8,"nodeType":"112","messageId":"113","endLine":7,"endColumn":23},{"ruleId":"110","severity":1,"message":"136","line":4,"column":25,"nodeType":"112","messageId":"113","endLine":4,"endColumn":35},{"ruleId":"137","severity":1,"message":"138","line":55,"column":1,"nodeType":"139","messageId":"140","endLine":96,"endColumn":2},{"ruleId":"110","severity":1,"message":"141","line":3,"column":9,"nodeType":"112","messageId":"113","endLine":3,"endColumn":15},{"ruleId":"142","severity":1,"message":"143","line":12,"column":13,"nodeType":"144","messageId":"145","endLine":12,"endColumn":15},{"ruleId":"110","severity":1,"message":"146","line":18,"column":7,"nodeType":"112","messageId":"113","endLine":18,"endColumn":17},{"ruleId":"130","severity":1,"message":"147","line":50,"column":5,"nodeType":"132","endLine":50,"endColumn":15,"suggestions":"148"},{"ruleId":"142","severity":1,"message":"143","line":75,"column":41,"nodeType":"144","messageId":"145","endLine":75,"endColumn":43},{"ruleId":"130","severity":1,"message":"149","line":80,"column":5,"nodeType":"132","endLine":80,"endColumn":50,"suggestions":"150"},{"ruleId":"110","severity":1,"message":"151","line":102,"column":31,"nodeType":"112","messageId":"113","endLine":102,"endColumn":37},{"ruleId":"130","severity":1,"message":"152","line":126,"column":5,"nodeType":"132","endLine":126,"endColumn":36,"suggestions":"153"},{"ruleId":"130","severity":1,"message":"154","line":142,"column":6,"nodeType":"132","endLine":142,"endColumn":21,"suggestions":"155"},{"ruleId":"110","severity":1,"message":"156","line":4,"column":29,"nodeType":"112","messageId":"113","endLine":4,"endColumn":35},{"ruleId":"157","severity":1,"message":"158","line":18,"column":32,"nodeType":"159","messageId":"160","endLine":18,"endColumn":34},{"ruleId":"110","severity":1,"message":"161","line":13,"column":13,"nodeType":"112","messageId":"113","endLine":13,"endColumn":17},{"ruleId":"110","severity":1,"message":"162","line":14,"column":13,"nodeType":"112","messageId":"113","endLine":14,"endColumn":18},{"ruleId":"130","severity":1,"message":"163","line":27,"column":6,"nodeType":"132","endLine":27,"endColumn":8,"suggestions":"164"},{"ruleId":"110","severity":1,"message":"165","line":52,"column":9,"nodeType":"112","messageId":"113","endLine":52,"endColumn":19},{"ruleId":"110","severity":1,"message":"166","line":67,"column":9,"nodeType":"112","messageId":"113","endLine":67,"endColumn":19},{"ruleId":"130","severity":1,"message":"167","line":21,"column":6,"nodeType":"132","endLine":21,"endColumn":8,"suggestions":"168"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["169"],"no-negated-in-lhs",["170"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","'DrawBoard' is defined but never used.","'AnswerField' is defined but never used.","'Graph' is defined but never used.","'QuestionField' is defined but never used.","'Button' is defined but never used.","'Timer' is defined but never used.","'ExamSteps' is defined but never used.","'lines' is defined but never used.","'points' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.","ArrayExpression",["171"],"'RotateLeftIcon' is defined but never used.","'RotateRightIcon' is defined but never used.","'handleLine' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'shapes' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'adjustLine' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'lines'. Either include it or remove the dependency array.",["172"],"React Hook useCallback has a missing dependency: 'getMousePosition'. Either include it or remove the dependency array.",["173"],"'offset' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'lines'. Either include them or remove the dependency array.",["174"],"React Hook useEffect has a missing dependency: 'drag'. Either include it or remove the dependency array.",["175"],"'factor' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'days' is assigned a value but never used.","'hours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.choosenTime' and 'timeRightNow'. Either include them or remove the dependency array.",["176"],"'handleNext' is assigned a value but never used.","'handleSkip' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getResult'. Either include it or remove the dependency array.",["177"],"no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},"Update the dependencies array to be: [currentLine, lines]",{"range":"192","text":"193"},"Update the dependencies array to be: [lines]",{"range":"194","text":"195"},"Update the dependencies array to be: [getSelectedPoint, getMousePosition]",{"range":"196","text":"197"},"Update the dependencies array to be: [drag, getSelectedPoint, lines, selectedPoint]",{"range":"198","text":"199"},"Update the dependencies array to be: [drag, selectedPoint]",{"range":"200","text":"201"},"Update the dependencies array to be: [props.choosenTime, timeRightNow]",{"range":"202","text":"203"},"Update the dependencies array to be: [getResult]",{"range":"204","text":"205"},[1477,1490],"[currentLine, lines]",[1354,1364],"[lines]",[2231,2276],"[getSelectedPoint, getMousePosition]",[3802,3833],"[drag, getSelectedPoint, lines, selectedPoint]",[4260,4275],"[drag, selectedPoint]",[909,911],"[props.choosenTime, timeRightNow]",[527,529],"[getResult]"]