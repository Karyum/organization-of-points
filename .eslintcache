[{"/home/ammar/organization-of-points/src/index.js":"1","/home/ammar/organization-of-points/src/App.js":"2","/home/ammar/organization-of-points/src/components/AppTest.js":"3","/home/ammar/organization-of-points/src/utils/useMousePosition.js":"4","/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx":"5","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"6","/home/ammar/organization-of-points/src/screens/TestScreen/components/Result.jsx":"7","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx":"8","/home/ammar/organization-of-points/src/components/Graph/index.jsx":"9","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx":"10","/home/ammar/organization-of-points/src/utils/boardUtils.js":"11","/home/ammar/organization-of-points/src/utils/consts.js":"12","/home/ammar/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx":"13","/home/ammar/organization-of-points/src/components/ExamSteps/index.jsx":"14","/home/ammar/organization-of-points/src/components/Timer/index.jsx":"15","/home/ammar/organization-of-points/src/screens/TestScreen/index.jsx":"16","/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionInfo.jsx":"17"},{"size":215,"mtime":1610913495795,"results":"18","hashOfConfig":"19"},{"size":1782,"mtime":1611132450652,"results":"20","hashOfConfig":"19"},{"size":654,"mtime":1611497034661,"results":"21","hashOfConfig":"19"},{"size":511,"mtime":1610913495823,"results":"22","hashOfConfig":"19"},{"size":2565,"mtime":1611500992781,"results":"23","hashOfConfig":"19"},{"size":6036,"mtime":1611501606876,"results":"24","hashOfConfig":"19"},{"size":872,"mtime":1611158077080,"results":"25","hashOfConfig":"19"},{"size":2528,"mtime":1610374239857,"results":"26","hashOfConfig":"19"},{"size":804,"mtime":1611145427732,"results":"27","hashOfConfig":"19"},{"size":17404,"mtime":1611480274967,"results":"28","hashOfConfig":"19"},{"size":2686,"mtime":1611498608092,"results":"29","hashOfConfig":"19"},{"size":446,"mtime":1611151187997,"results":"30","hashOfConfig":"19"},{"size":959,"mtime":1611490567916,"results":"31","hashOfConfig":"19"},{"size":3710,"mtime":1611146287943,"results":"32","hashOfConfig":"19"},{"size":1458,"mtime":1611132450652,"results":"33","hashOfConfig":"19"},{"size":0,"mtime":1610913495795,"results":"34","hashOfConfig":"19"},{"size":1329,"mtime":1611498810968,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},"gw6x7x",{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"39"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"39"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"39"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"39"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"39"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"39"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ammar/organization-of-points/src/index.js",["81"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["82","83"],"/home/ammar/organization-of-points/src/App.js",["84","85","86"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/ammar/organization-of-points/src/components/AppTest.js",["87","88","89","90","91"],"import React, { useEffect } from \"react\";\nimport DrawBoard, { ExerciseWriter } from \"./DrawBoard\";\nimport AnswerField from \"../screens/TestScreen/components/AnswerField\";\nimport Graph from \"./Graph\";\nimport \"./style.css\";\nimport QuestionField from \"../screens/TestScreen/components/QuestionField\";\nimport Result from \"../screens/TestScreen/components/Result\";\nimport shapes from \"../../src/data/shapes.json\";\nexport default function AppTest() {\n  useEffect(() => {\n    window.localStorage.setItem(\"shapes\", JSON.stringify(shapes));\n  }, []);\n  return (\n    <QuestionField />\n    // <ExerciseWriter></ExerciseWriter>\n    // <DrawBoard></DrawBoard>\n  );\n}\n","/home/ammar/organization-of-points/src/utils/useMousePosition.js",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx",["92","93","94","95","96","97","98","99","100","101","102"],"/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["103","104","105","106","107","108","109"],"/home/ammar/organization-of-points/src/screens/TestScreen/components/Result.jsx",["110","111","112","113","114","115"],"import React, { useEffect } from \"react\";\nimport imgUrl from \"../../../img-icons/star.svg\";\n\nfunction Result(props) {\n  const result = props.result;\n  const [starNum, setStarNum] = React.useState(null);\n  const MessageArr = [\n    \"You got only one star\",\n    \"Not bad you got Two Stars\",\n    \"Great job You got THREE stars\",\n  ];\n\n  const getResult = () => setStarNum(prev=> result >= 9 && [1,1,1] || result >= 5 && [1,1] || [1]);\n  \n  const starImg = <img style={{width: 150}} src={imgUrl}></img>;\n\n  useEffect(() => {\n    getResult();\n  }, []);\n\n  if (!starNum) return <p>Something went wrong</p>;\n  return (\n    <div>\n      <p>{MessageArr[starNum.length - 1]}</p>\n      <div className=\"stars\" style={{display:'flex'}}>\n        {starNum.map((star, index) => (\n          <div key={index}>{starImg}</div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Result;\n","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx",["116","117"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/ammar/organization-of-points/src/components/Graph/index.jsx",["118","119"],"\nimport './style.css'\nexport function Line(props){\n    const {point_1, point_2,factor} = props;\n    return (\n        <g fill={props.fill}>\n        <circle  cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_1'/>\n        <circle  cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_2'/>\n        <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke={props.fill} data-index={props.index} className={props.deleteLine? 'erasable':'normal'}/>\n        </g>\n        \n    )\n}\n\nexport default function Graph(props) {\n  \n    return (<g>\n        {props.points.map(point=>{\n               <circle  cx={point.x} cy={point.y} r=\"5\" />\n           })}\n    </g>\n\n           \n    )\n}\n","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx",["120","121","122","123","124","125","126","127","128","129","130"],"import React, { useRef, useState, useEffect, useCallback, useContext } from \"react\";\nimport { Line } from \"../Graph\";\nimport { adjustShapeToBoard, shapeCenter, shapeContainerParams, calcTowVectorsDeg } from '../../../src/utils/boardUtils'\nimport \"./style.css\";\n\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction normalizePoint(point, factor) {\n  const { x, y } = point;\n  if (factor != 0) {\n    return { x: x / factor, y: y / factor }\n  }\n}\n\nfunction useSvgMousePosition(svgRef) {\n  useEffect(() => {\n    console.log('useSvgMousePosition mount...')\n  }, [])\n\n  useEffect(() => {\n    console.log('useSvgMousePosition svgRef changed...')\n  }, [svgRef])\n  const mousePosition = useCallback(\n    (evt) => {\n      const point = svgRef.current.createSVGPoint();\n      point.x = evt.clientX;\n      point.y = evt.clientY;\n      const { x, y } = point.matrixTransform(\n        svgRef.current.getScreenCTM().inverse()\n      );\n      return { x, y };\n    },\n    [svgRef],\n  )\n\n  return mousePosition;\n\n}\n\nconst minTwoPointsDistance = 20;\n\nexport default function DrawBoard(props) {\n  const boardRef = useRef();\n  const [boardSize, setBoardSize] = useState(0);\n  const [isDeleteActive, SetDeleteActivion] = useState(false);\n  const [linesNum, setLinesNum] = useState(3);\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  const [lines, setlines] = useState([]);\n\n  const getMousePosition = useSvgMousePosition(boardRef)\n\n  const getSelectedPoint = useCallback(\n    (point, index) => {\n      if (index < lines.length) {\n        return lines[index][point];\n      }\n    },\n    [linesNum]\n  );\n\n  const startDrag = useCallback(\n    (evt) => {\n      if (evt.target.classList.contains(\"draggable\")) {\n        console.log(\"start drag ....\");\n        const { point, index } = evt.target.dataset;\n        const pointCoordinates = getSelectedPoint(point, index);\n        if (pointCoordinates) {\n          const offset = getMousePosition(evt);\n          offset.x -= pointCoordinates.x;\n          offset.y -= pointCoordinates.y;\n          console.log(offset);\n          setSelectedPoint({\n            point,\n            index,\n            offset,\n          });\n        }\n      } else if (evt.target.classList.contains(\"erasable\")) {\n        console.log(\"object is erasable...\");\n        const index = evt.target.dataset.index;\n        setlines(prev => {\n          console.log(prev)\n          return prev.filter((_, i) => i != index);\n        })\n      }\n    },\n\n    [setSelectedPoint, getSelectedPoint, setlines]\n  );\n\n  const drag = useCallback(\n    (evt) => {\n      if (selectedPoint) {\n        evt.preventDefault();\n        const position = getMousePosition(evt);\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        actualPoint.x = position.x - offset.x;\n        actualPoint.y = position.y - offset.y;\n        setlines((prevPoints) => [...prevPoints]);\n      }\n    },\n    [selectedPoint, getMousePosition, getSelectedPoint]\n  );\n\n  const endDrag = useCallback(\n    (evt) => {\n      boardRef.current.removeEventListener(\"mousemove\", drag);\n      if (selectedPoint) {\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        if (actualPoint) {\n          let closestPointFound = false;\n          lines.forEach((line, index) => {\n            if (!closestPointFound) {\n              if (distance(actualPoint, line.point_1) < minTwoPointsDistance) {\n                actualPoint.x = line.point_1.x;\n                actualPoint.y = line.point_1.y;\n                closestPointFound = true;\n              } else if (\n                distance(actualPoint, line.point_2) < minTwoPointsDistance\n              ) {\n                actualPoint.x = line.point_2.x;\n                actualPoint.y = line.point_2.y;\n                closestPointFound = true;\n              }\n            }\n          });\n          setlines((prevPoints) => [...prevPoints]);\n        }\n        setSelectedPoint(null)\n      }\n    },\n    [boardRef, drag, selectedPoint]\n  );\n\n  useEffect(() => {\n    setBoardSize(boardRef.current.clientHeight);\n  }, [])\n\n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousedown\", startDrag);\n    boardRef.current.addEventListener(\"mouseup\", endDrag);\n    boardRef.current.addEventListener(\"mouseleave\", endDrag);\n  }, [boardRef, drag, startDrag, endDrag]);\n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousemove\", drag);\n  }, [selectedPoint]);\n\n  // tool handlers\n\n  const handleAddLine = (event) => {\n    const newLine = {\n      point_1: {\n        x: 20,\n        y: 280,\n      },\n      point_2: {\n        x: 20,\n        y: 240,\n      },\n    };\n\n    setlines((prev) => {\n      prev.push({ ...newLine });\n      return [...prev];\n    });\n\n    setLinesNum((prev) => prev + 1);\n    SetDeleteActivion(false);\n  };\n\n  const handleDeleteLine = (event) => {\n    console.log(\"delete activated...\");\n    SetDeleteActivion(true);\n  };\n\n  const handleClear = (event) => {\n    setlines([]);\n  };\n\n  const handleSubmitGraph = (event) => {\n    const myStorage = window.localStorage;\n    const normalizedLines = [...lines].map(line => {\n      let { point_1, point_2 } = line;\n      point_1 = normalizePoint(point_1, boardSize);\n      point_2 = normalizePoint(point_2, boardSize);\n      return { point_1, point_2 };\n    })\n    let shapes = myStorage.getItem('myShapes');\n    if (shapes) {\n      shapes = JSON.parse(shapes);\n      shapes.push(normalizedLines);\n      myStorage.setItem(\"myShapes\", JSON.stringify(shapes));\n      return;\n    }\n    shapes = [];\n    shapes.push(normalizedLines);\n    myStorage.setItem('myShapes', JSON.stringify(shapes));\n  };\n  return (\n    <div className=\"painter\">\n      <svg\n        ref={boardRef}\n        id=\"mainBoard\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"draw-board\"\n      >\n        {lines.map((line, index) => {\n          return (\n            <Line\n              key={JSON.stringify(line) + index}\n              {...line}\n              index={index}\n              fill={index === lines.length - 1 ? \"blue\" : \"red\"}\n              deleteLine={isDeleteActive}\n            />\n          );\n        })}\n      </svg>\n      <div className=\"actions\">\n        <button name=\"add\" onClick={handleAddLine}>\n          Add Line\n        </button>\n        <button name=\"delete\" onClick={handleDeleteLine}>\n          delete Line\n        </button>\n        <button onClick={handleClear}>\n          clear all\n        </button>\n        <button name=\"submit\" onClick={handleSubmitGraph}>\n          submit Graph\n        </button>\n      </div>\n    </div>\n  );\n}\n\n\nconst selectedShapesContext = React.createContext();\n\nexport function ExerciseWriter(props) {\n  const [shapes, setShapes] = useState([]);\n  const [selectedShapes, setSelectedShapes] = useState([])\n\n  useEffect(() => {\n    const shapesData = JSON.parse(window.localStorage.getItem('shapes'));\n    setShapes(shapesData);\n  }, [])\n\n\n\n\n\n  return (\n    <selectedShapesContext.Provider value={{ selectedShapes, setSelectedShapes, shapes }}>\n      <div className=\"exam-writer-main\">\n        <ExamShapesBoard />\n        <div className=\"exam-writer-shapes-container\">\n          <div className=\"exam-writer-shapes\">\n            {shapes.map((shape, index) => {\n              return (<ShapeImage key={JSON.stringify(shape) + index} index={index} shape={shape} />)\n            })}\n          </div>\n          <button>new shape</button>\n        </div>\n      </div>\n    </selectedShapesContext.Provider>\n\n  )\n}\n\nconst actions = {\n  rotate: {\n    cursor: \"rotatable\",\n    value: 'rotate'\n  },\n  delete: {\n    cursor: \"erasable\",\n    value: 'delete'\n  },\n  translate: {\n    cursor: \"moveable\",\n    value: 'translate'\n  },\n\n}\n\n\n\nconst ExamShapesBoard = React.memo((props) => {\n  const paperRef = useRef();\n  const [paperSize, setPaperSize] = useState(1);\n  const [shapes, setShapes] = useState([]);\n  const [shapesCount, setShapesCount] = useState(0);\n  const [action, setAction] = useState({ ...actions.translate })\n  const [selectedShape, setSelectedShape] = useState(null);\n\n  const { selectedShapes, setSelectedShapes } = useContext(selectedShapesContext);\n\n  const getMousePosition = useSvgMousePosition(paperRef);\n\n  const getSelectedShape = useCallback(\n    (index) => {\n      if (index < shapesCount) {\n        return shapes[index];\n      }\n    },\n    [shapesCount],\n  )\n\n  const drag = useCallback(\n    (evt) => {\n      console.log(\"drag...\")\n      if (selectedShape) {\n        const mousePosition = getMousePosition(evt);\n        const { index, offset } = selectedShape;\n        switch (action.value) {\n          case 'translate':\n            console.log('translate.....')\n            setShapes(prev => {\n              const currentShape = prev[index];\n              currentShape.translate.x = mousePosition.x - offset.x;\n              currentShape.translate.y = mousePosition.y - offset.y;\n              return [...prev]\n            })\n            break;\n          case 'rotate':\n            console.log('rotate...')\n            setShapes(prev => {\n              const shape = prev[index];\n              const { center, translate, scale } = shape;\n              const relativeCenter = {\n                x: (center.x + translate.x) * scale.x,\n                y: (center.y + translate.y) * scale.y\n              }\n              const v1 = {\n                x: offset.x - relativeCenter.x,\n                y: offset.y - relativeCenter.y\n              }\n              const v2 = {\n                x: mousePosition.x - relativeCenter.x,\n                y: mousePosition.y - relativeCenter.y\n              }\n              const deg = calcTowVectorsDeg(v2, v1);\n              console.log(\"current deg >>> \", deg)\n              shape.rotateDeg = offset.prevDeg + deg\n              return [...prev];\n            })\n            break;\n\n          default:\n            break;\n        }\n\n      }\n\n    },\n    [selectedShape, action, getMousePosition],\n  )\n\n  const startDrag = useCallback(\n    (evt) => {\n      const graph = evt.target.parentElement;\n      if (graph && graph.classList.contains('graph')) {\n        const { index } = graph.dataset\n        const currentShape = getSelectedShape(index);\n        const offset = getMousePosition(evt);\n        switch (action.value) {\n          case 'translate':\n            console.log(\"Start Translate...\");\n            offset.x -= currentShape.translate.x;\n            offset.y -= currentShape.translate.y;\n            setSelectedShape({ index, offset })\n            break;\n          case 'rotate':\n            console.log(\"Start Rotate...\")\n            offset.prevDeg = currentShape.rotateDeg;\n            console.log({ index, offset });\n            setSelectedShape({ index, offset })\n            break;\n          default:\n            break;\n        }\n\n      }\n    },\n    [getMousePosition, setSelectedShape, getSelectedShape, action]\n  )\n\n\n\n  const endDrag = useCallback(\n    (evt) => {\n      console.log('end drag...')\n      paperRef.current.removeEventListener('mousemove', drag);\n      setSelectedShape(null);\n    },\n    [paperRef, drag, setSelectedShape]//, startDrag\n  )\n\n\n  useEffect(() => {\n    console.log('rerendered... listner startDrag added')\n    paperRef.current.addEventListener('mousedown', startDrag);\n    return () => {\n      paperRef.current.removeEventListener('mousedown', startDrag);\n    }\n  }, [paperRef, startDrag])\n\n  useEffect(() => {\n    console.log('rerendered... listner endDrag added')\n    paperRef.current.addEventListener('mouseleave', endDrag);\n    paperRef.current.addEventListener('mouseup', endDrag)\n    return () => {\n      paperRef.current.removeEventListener('mouseleave', endDrag);\n      paperRef.current.removeEventListener('mouseup', endDrag)\n    }\n\n  }, [paperRef, endDrag])\n\n  useEffect(() => {\n    console.log(selectedShape);\n    if (selectedShape) {\n      paperRef.current.addEventListener('mousemove', drag);\n    }\n\n  }, [paperRef, selectedShape])\n\n  useEffect(() => {\n    setPaperSize(paperRef.current.clientHeight)\n  }, [paperRef, setPaperSize])\n\n\n  useEffect(() => {\n    if (selectedShapes.length > 0) {\n      setShapes(prev => {\n        return [...prev, ...selectedShapes.map((shape, index) => {\n          const adjustedShap = adjustShapeToBoard(shape, paperSize);\n          return {\n            lines: adjustedShap,\n            center: shapeCenter(adjustedShap),\n            container: shapeContainerParams(adjustedShap),\n            rotateDeg: 0,\n            translate: {\n              x: 0,\n              y: 0,\n            },\n            scale: {\n              x: 1,\n              y: 1\n            }\n          }\n        })]\n      })\n      setShapesCount(count => count + 1);\n      setSelectedShapes([]);\n\n    }\n  }\n    , [selectedShapes, setSelectedShapes, paperSize, setShapes, setShapesCount, paperRef]);\n\n\n  // handlers\n  const handleActionClick = (event) => {\n    console.log(event.target.name, 'had been clicked...')\n    setAction({ ...actions[event.target.name] })\n  }\n\n  const handleSubmit = (event) => {\n    const myStorage = window.localStorage;\n    const normalizedShapes = shapes.map(shape => {\n      let { lines, center, rotateDeg, translate, scale } = shape;\n      // normalizing the lines the center an the translate\n      lines = [...lines].map(line => {\n        const [point_1, point_2] = [normalizePoint(line.point_1, paperSize), normalizePoint(line.point_2, paperSize)];\n        return { point_1, point_2 };\n      });\n      center = normalizePoint(center, paperSize);\n      translate = normalizePoint(translate, paperSize);\n      return { lines, center, rotateDeg, translate, scale };\n    })\n\n    let exercise = myStorage.getItem('exercise');\n    if (exercise) {\n      exercise = JSON.parse(exercise);\n      exercise.push(normalizedShapes);\n      myStorage.setItem('exercise', JSON.stringify(exercise));\n      return;\n    }\n    exercise = [];\n    exercise.push(normalizedShapes);\n    myStorage.setItem('exercise', JSON.stringify(exercise));\n    console.log(shapes);\n  }\n\n\n  return (\n    <div className=\"exam-writer-paper\">\n      <svg ref={paperRef} className=\"exam-writer-draw-paper\">\n        {shapes.map((shape, index) => {\n          const { lines, center, translate, rotateDeg, scale, container } = shape;\n          return (\n            <g data-index={index} data-center={JSON.stringify(shape.center)} data-action={action.value} key={JSON.stringify(shape) + index} fill=\"blue\" transform={`rotate(${rotateDeg},${(center.x + translate.x) * scale.x},${(center.y + translate.y) * scale.y}) translate(${translate.x},${translate.y}) scale(${scale.x},${scale.y})`}\n              className=\" graph\">\n              <rect x={container.x} y={container.y} width={container.w} height={container.h} fill='transparent' className=\"moveable\" data-index={index} data-action='translate' />\n              {lines.map(line => {\n                return <g key={JSON.stringify(line) + index} className='graph'>\n                  <line\n                    x1={line.point_1.x}\n                    y1={line.point_1.y}\n                    x2={line.point_2.x}\n                    y2={line.point_2.y}\n                    stroke=\"blue\"\n                    strokeWidth=\"1\"\n                  />\n                  <line\n                    x1={line.point_1.x}\n                    y1={line.point_1.y}\n                    x2={line.point_2.x}\n                    y2={line.point_2.y}\n                    stroke=\"transparent\"\n                    strokeWidth=\"10\"\n                    data-index={index}\n                    data-action='scale'\n                    className=\"resizable\"\n                  />\n                  <circle cx={line.point_1.x} cy={line.point_1.y} r='10' fill='transparent' className=\"rotatable\" data-index={index}\n                    data-action='rotate' />\n                  <circle cx={line.point_2.x} cy={line.point_2.y} r='10' fill='transparent' className='rotatable' data-index={index}\n                    data-action='rotate' />\n                </g>\n              })}\n            </g>)\n        })}\n      </svg>\n      <div className=\"exam-writer-paper-tools\">\n        <button onClick={handleActionClick} name=\"delete\">delete shape</button>\n        <button onClick={handleActionClick} name=\"translate\">move shape</button>\n        <button onClick={handleActionClick} name=\"rotate\">rotate shape</button>\n        <button onClick={handleSubmit}>submit</button>\n      </div>\n    </div>\n  )\n})\n\n\n\nfunction ShapeImage(props) {\n  const imageRef = useRef();\n  const [imageSize, setImageSize] = useState(1);\n  const [shape, setShape] = useState([]);\n  const { setSelectedShapes, shapes } = useContext(selectedShapesContext);\n\n\n  useEffect(() => {\n    setImageSize(imageRef.current.clientHeight);\n  }, [])\n\n  useEffect(() => {\n    const scaledShape = adjustShapeToBoard(props.shape, imageSize);\n    setShape(scaledShape);\n  }, [imageSize, props.shape]);\n\n  return (\n    <svg ref={imageRef} className='exam-writer-shape-image' index={props.index} onClick={() => setSelectedShapes(prev => [...prev, shapes[props.index]])}>\n      {shape.map((line, index) => {\n        return <line\n          key={JSON.stringify(line) + index}\n          x1={line.point_1.x}\n          y1={line.point_1.y}\n          x2={line.point_2.x}\n          y2={line.point_2.y}\n          stroke=\"blue\"\n          strokeWidth=\"1\"\n        />\n      })}\n    </svg>\n  )\n}\n","/home/ammar/organization-of-points/src/utils/boardUtils.js",[],"/home/ammar/organization-of-points/src/utils/consts.js",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx",["131","132","133","134"],"import React, { useRef, useEffect, useState } from \"react\";\nimport { adjustShapeToBoard } from \"../../../utils/boardUtils\";\n\nfunction ShapesInfo(props) {\n  const { lines, center, translate, scale, rotateDeg } = props.shape;\n  return (<g transform={`rotate(${rotateDeg},${(center.x + translate.x) * scale.x},${(center.y + translate.y) * scale.y}) translate(${translate.x},${translate.y})`}>\n    {\n      lines.map((line, index) => {\n        return props.infoType === 'line' ? (\n          <line\n            key={\"index\" + index}\n            x1={line.point_1.x}\n            y1={line.point_1.y}\n            x2={line.point_2.x}\n            y2={line.point_2.y}\n            stroke=\"blue\"\n            strokeWidth=\"1\"\n          />) :\n          (<g>\n            <circle cx={line.point_1.x} cy={line.point_1.y} r='3' fill='blue' />\n            <circle cx={line.point_2.x} cy={line.point_2.y} r='3' fill='blue' /></g>)\n      })\n    }\n  </g>)\n}\n\nexport default ShapesInfo;\n","/home/ammar/organization-of-points/src/components/ExamSteps/index.jsx",["135","136"],"import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  instructions: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n}));\n\nconst steps = [\n  { id: 1, text: \"Exam 1\", step: \"Step 1\" },\n  { id: 2, text: \"Exam 2\", step: \"Step 2\" },\n  { id: 3, text: \"Exam 3\", step: \"Step 3\" },\n  { id: 4, text: \"Exam 4\", step: \"Step 4\" },\n  { id: 5, text: \"Exam 5\", step: \"Step 5\" },\n];\n\nfunction getSteps() {\n  return steps.map((step) => step.step);\n}\n\nfunction getStepContent(step) {\n  steps.find((stp) => stp.id === step);\n}\n\nexport default function ExamSteps() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set());\n  const steps = getSteps();\n\n  const isStepOptional = (step) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    setSkipped((prevSkipped) => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps = {};\n          const labelProps = {};\n\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>\n              {getStepContent(activeStep)}\n            </Typography>\n            <div>\n              <Button\n                disabled={activeStep === 0}\n                onClick={handleBack}\n                className={classes.button}\n              >\n                Back\n              </Button>\n              {/* <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n              </Button> */}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","/home/ammar/organization-of-points/src/components/Timer/index.jsx",["137","138","139"],"import React, { useEffect, useState } from \"react\";\n\nconst Timer = (props) => {\n  const timeRightNow = new Date().getTime();\n\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    const timer = setInterval(function () {\n      const now = new Date().getTime();\n      const deadline = timeRightNow + (props.choosenTime || 10000000);\n      const t = deadline - now;\n      const days = Math.floor(t / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((t % (1000 * 60)) / 1000);\n      const updatedTimer = minutes + \":\" + seconds;\n      setTimer(updatedTimer);\n      if (t < 0) {\n        clearInterval(timer);\n        const timeOut = \"TIME OUT\";\n        setTimer(timeOut);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 30,\n        fontWeight: \"bold\",\n        color: \"#FFF\",\n        boxShadow: \"1px 1px 25px #9E9E9E\",\n        margin: 5,\n        borderWidth: 1,\n        borderColor: \"#9E9E9E\",\n        background: \"#F2AF58\",\n        ...props.style,\n        borderRadius: props.style.height / 2 || 75,\n      }}\n    >\n      <h3>{timer}</h3>\n    </div>\n  );\n};\n\nexport default Timer;\n","/home/ammar/organization-of-points/src/screens/TestScreen/index.jsx",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionInfo.jsx",["140","141"],{"ruleId":"142","severity":1,"message":"143","line":4,"column":8,"nodeType":"144","messageId":"145","endLine":4,"endColumn":11},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"142","severity":1,"message":"150","line":2,"column":25,"nodeType":"144","messageId":"145","endLine":2,"endColumn":34},{"ruleId":"142","severity":1,"message":"151","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":15},{"ruleId":"142","severity":1,"message":"152","line":10,"column":17,"nodeType":"144","messageId":"145","endLine":10,"endColumn":25},{"ruleId":"142","severity":1,"message":"153","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":17},{"ruleId":"142","severity":1,"message":"154","line":2,"column":21,"nodeType":"144","messageId":"145","endLine":2,"endColumn":35},{"ruleId":"142","severity":1,"message":"155","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":19},{"ruleId":"142","severity":1,"message":"156","line":4,"column":8,"nodeType":"144","messageId":"145","endLine":4,"endColumn":13},{"ruleId":"142","severity":1,"message":"157","line":7,"column":8,"nodeType":"144","messageId":"145","endLine":7,"endColumn":14},{"ruleId":"142","severity":1,"message":"158","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":15},{"ruleId":"142","severity":1,"message":"159","line":2,"column":17,"nodeType":"144","messageId":"145","endLine":2,"endColumn":23},{"ruleId":"142","severity":1,"message":"160","line":3,"column":10,"nodeType":"144","messageId":"145","endLine":3,"endColumn":16},{"ruleId":"142","severity":1,"message":"161","line":6,"column":8,"nodeType":"144","messageId":"145","endLine":6,"endColumn":22},{"ruleId":"142","severity":1,"message":"162","line":7,"column":8,"nodeType":"144","messageId":"145","endLine":7,"endColumn":23},{"ruleId":"142","severity":1,"message":"163","line":11,"column":8,"nodeType":"144","messageId":"145","endLine":11,"endColumn":18},{"ruleId":"142","severity":1,"message":"164","line":12,"column":10,"nodeType":"144","messageId":"145","endLine":12,"endColumn":28},{"ruleId":"142","severity":1,"message":"165","line":12,"column":30,"nodeType":"144","messageId":"145","endLine":12,"endColumn":44},{"ruleId":"142","severity":1,"message":"166","line":22,"column":16,"nodeType":"144","messageId":"145","endLine":22,"endColumn":23},{"ruleId":"142","severity":1,"message":"167","line":24,"column":9,"nodeType":"144","messageId":"145","endLine":24,"endColumn":15},{"ruleId":"168","severity":1,"message":"169","line":24,"column":41,"nodeType":"170","messageId":"171","endLine":24,"endColumn":48},{"ruleId":"142","severity":1,"message":"172","line":1,"column":46,"nodeType":"144","messageId":"145","endLine":1,"endColumn":50},{"ruleId":"142","severity":1,"message":"173","line":7,"column":8,"nodeType":"144","messageId":"145","endLine":7,"endColumn":13},{"ruleId":"142","severity":1,"message":"174","line":8,"column":8,"nodeType":"144","messageId":"145","endLine":8,"endColumn":17},{"ruleId":"142","severity":1,"message":"158","line":9,"column":10,"nodeType":"144","messageId":"145","endLine":9,"endColumn":15},{"ruleId":"142","severity":1,"message":"164","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":28},{"ruleId":"142","severity":1,"message":"175","line":17,"column":10,"nodeType":"144","messageId":"145","endLine":17,"endColumn":16},{"ruleId":"176","severity":1,"message":"177","line":74,"column":6,"nodeType":"178","endLine":74,"endColumn":19,"suggestions":"179"},{"ruleId":"180","severity":1,"message":"181","line":13,"column":57,"nodeType":"182","messageId":"183","endLine":13,"endColumn":59},{"ruleId":"180","severity":1,"message":"181","line":13,"column":68,"nodeType":"182","messageId":"183","endLine":13,"endColumn":70},{"ruleId":"180","severity":1,"message":"184","line":13,"column":68,"nodeType":"182","messageId":"183","endLine":13,"endColumn":70},{"ruleId":"180","severity":1,"message":"184","line":13,"column":83,"nodeType":"182","messageId":"183","endLine":13,"endColumn":85},{"ruleId":"185","severity":1,"message":"186","line":15,"column":19,"nodeType":"187","endLine":15,"endColumn":58},{"ruleId":"176","severity":1,"message":"188","line":19,"column":6,"nodeType":"178","endLine":19,"endColumn":8,"suggestions":"189"},{"ruleId":"142","severity":1,"message":"190","line":4,"column":25,"nodeType":"144","messageId":"145","endLine":4,"endColumn":35},{"ruleId":"191","severity":1,"message":"192","line":55,"column":1,"nodeType":"193","messageId":"194","endLine":96,"endColumn":2},{"ruleId":"142","severity":1,"message":"195","line":4,"column":29,"nodeType":"144","messageId":"145","endLine":4,"endColumn":35},{"ruleId":"196","severity":1,"message":"197","line":18,"column":32,"nodeType":"198","messageId":"199","endLine":18,"endColumn":34},{"ruleId":"200","severity":1,"message":"201","line":12,"column":14,"nodeType":"170","messageId":"202","endLine":12,"endColumn":16},{"ruleId":"176","severity":1,"message":"203","line":60,"column":5,"nodeType":"178","endLine":60,"endColumn":15,"suggestions":"204"},{"ruleId":"200","severity":1,"message":"201","line":85,"column":42,"nodeType":"170","messageId":"202","endLine":85,"endColumn":44},{"ruleId":"176","severity":1,"message":"205","line":90,"column":5,"nodeType":"178","endLine":90,"endColumn":51,"suggestions":"206"},{"ruleId":"142","severity":1,"message":"207","line":112,"column":31,"nodeType":"144","messageId":"145","endLine":112,"endColumn":37},{"ruleId":"176","severity":1,"message":"208","line":136,"column":5,"nodeType":"178","endLine":136,"endColumn":36,"suggestions":"209"},{"ruleId":"176","severity":1,"message":"210","line":152,"column":6,"nodeType":"178","endLine":152,"endColumn":21,"suggestions":"211"},{"ruleId":"176","severity":1,"message":"212","line":313,"column":5,"nodeType":"178","endLine":313,"endColumn":18,"suggestions":"213"},{"ruleId":"176","severity":1,"message":"214","line":411,"column":16,"nodeType":"144","endLine":411,"endColumn":23},{"ruleId":"176","severity":1,"message":"214","line":421,"column":16,"nodeType":"144","endLine":421,"endColumn":23},{"ruleId":"176","severity":1,"message":"210","line":432,"column":6,"nodeType":"178","endLine":432,"endColumn":31,"suggestions":"215"},{"ruleId":"142","severity":1,"message":"216","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":23},{"ruleId":"142","severity":1,"message":"150","line":1,"column":25,"nodeType":"144","messageId":"145","endLine":1,"endColumn":34},{"ruleId":"142","severity":1,"message":"217","line":1,"column":36,"nodeType":"144","messageId":"145","endLine":1,"endColumn":44},{"ruleId":"142","severity":1,"message":"164","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":28},{"ruleId":"142","severity":1,"message":"218","line":52,"column":9,"nodeType":"144","messageId":"145","endLine":52,"endColumn":19},{"ruleId":"142","severity":1,"message":"219","line":67,"column":9,"nodeType":"144","messageId":"145","endLine":67,"endColumn":19},{"ruleId":"142","severity":1,"message":"220","line":13,"column":13,"nodeType":"144","messageId":"145","endLine":13,"endColumn":17},{"ruleId":"142","severity":1,"message":"221","line":14,"column":13,"nodeType":"144","messageId":"145","endLine":14,"endColumn":18},{"ruleId":"176","severity":1,"message":"222","line":27,"column":6,"nodeType":"178","endLine":27,"endColumn":8,"suggestions":"223"},{"ruleId":"142","severity":1,"message":"164","line":2,"column":10,"nodeType":"144","messageId":"145","endLine":2,"endColumn":28},{"ruleId":"142","severity":1,"message":"224","line":2,"column":30,"nodeType":"144","messageId":"145","endLine":2,"endColumn":40},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["225"],"no-negated-in-lhs",["226"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","'DrawBoard' is defined but never used.","'ExerciseWriter' is defined but never used.","'AnswerField' is defined but never used.","'Graph' is defined but never used.","'Result' is defined but never used.","'lines' is defined but never used.","'points' is defined but never used.","'Button' is defined but never used.","'RotateLeftIcon' is defined but never used.","'RotateRightIcon' is defined but never used.","'ShapesInfo' is defined but never used.","'adjustShapeToBoard' is defined but never used.","'getShapePoints' is defined but never used.","'setDone' is assigned a value but never used.","'isDone' is assigned a value but never used.","no-self-compare","Comparing to itself is potentially pointless.","BinaryExpression","comparingToSelf","'memo' is defined but never used.","'Timer' is defined but never used.","'ExamSteps' is defined but never used.","'points' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.","ArrayExpression",["227"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getResult'. Either include it or remove the dependency array.",["228"],"'handleLine' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'factor' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","React Hook useCallback has a missing dependency: 'lines'. Either include it or remove the dependency array.",["229"],"React Hook useCallback has a missing dependency: 'getMousePosition'. Either include it or remove the dependency array.",["230"],"'offset' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'lines'. Either include them or remove the dependency array.",["231"],"React Hook useEffect has a missing dependency: 'drag'. Either include it or remove the dependency array.",["232"],"React Hook useCallback has a missing dependency: 'shapes'. Either include it or remove the dependency array.",["233"],"The ref value 'paperRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'paperRef.current' to a variable inside the effect, and use that variable in the cleanup function.",["234"],"'useRef' is defined but never used.","'useState' is defined but never used.","'handleNext' is assigned a value but never used.","'handleSkip' is assigned a value but never used.","'days' is assigned a value but never used.","'hours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.choosenTime' and 'timeRightNow'. Either include them or remove the dependency array.",["235"],"'scalePoint' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},"Update the dependencies array to be: [currentLine, lines]",{"range":"254","text":"255"},"Update the dependencies array to be: [getResult]",{"range":"256","text":"257"},"Update the dependencies array to be: [lines]",{"range":"258","text":"259"},"Update the dependencies array to be: [getSelectedPoint, getMousePosition]",{"range":"260","text":"261"},"Update the dependencies array to be: [drag, getSelectedPoint, lines, selectedPoint]",{"range":"262","text":"263"},"Update the dependencies array to be: [drag, selectedPoint]",{"range":"264","text":"265"},"Update the dependencies array to be: [shapes, shapesCount]",{"range":"266","text":"267"},"Update the dependencies array to be: [drag, paperRef, selectedShape]",{"range":"268","text":"269"},"Update the dependencies array to be: [props.choosenTime, timeRightNow]",{"range":"270","text":"271"},[2228,2241],"[currentLine, lines]",[542,544],"[getResult]",[1636,1646],"[lines]",[2515,2561],"[getSelectedPoint, getMousePosition]",[4087,4118],"[drag, getSelectedPoint, lines, selectedPoint]",[4537,4552],"[drag, selectedPoint]",[8436,8449],"[shapes, shapesCount]",[11990,12015],"[drag, paperRef, selectedShape]",[909,911],"[props.choosenTime, timeRightNow]"]