[{"/home/ammar/organization-of-points/src/index.js":"1","/home/ammar/organization-of-points/src/App.js":"2","/home/ammar/organization-of-points/src/components/AppTest.js":"3","/home/ammar/organization-of-points/src/utils/useMousePosition.js":"4","/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx":"5","/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx":"6","/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx":"7","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx":"8","/home/ammar/organization-of-points/src/components/Graph/index.jsx":"9","/home/ammar/organization-of-points/src/utils/consts.js":"10","/home/ammar/organization-of-points/src/utils/boardUtils.js":"11","/home/ammar/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx":"12","/home/ammar/organization-of-points/src/components/ExamSteps/index.jsx":"13","/home/ammar/organization-of-points/src/components/Timer/index.jsx":"14","/home/ammar/organization-of-points/src/screens/TestScreen/index.jsx":"15"},{"size":215,"mtime":1610913495795,"results":"16","hashOfConfig":"17"},{"size":1782,"mtime":1611132450652,"results":"18","hashOfConfig":"17"},{"size":483,"mtime":1611145427708,"results":"19","hashOfConfig":"17"},{"size":511,"mtime":1610913495823,"results":"20","hashOfConfig":"17"},{"size":5113,"mtime":1611150402510,"results":"21","hashOfConfig":"17"},{"size":1668,"mtime":1611150019207,"results":"22","hashOfConfig":"17"},{"size":6433,"mtime":1611145427724,"results":"23","hashOfConfig":"17"},{"size":2528,"mtime":1610374239857,"results":"24","hashOfConfig":"17"},{"size":804,"mtime":1611145427732,"results":"25","hashOfConfig":"17"},{"size":353,"mtime":1611146818637,"results":"26","hashOfConfig":"17"},{"size":1164,"mtime":1611149498575,"results":"27","hashOfConfig":"17"},{"size":968,"mtime":1611150587869,"results":"28","hashOfConfig":"17"},{"size":3710,"mtime":1611146287943,"results":"29","hashOfConfig":"17"},{"size":1458,"mtime":1611132450652,"results":"30","hashOfConfig":"17"},{"size":0,"mtime":1610913495795,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"gw6x7x",{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"35"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"35"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/home/ammar/organization-of-points/src/index.js",["70"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport AppTest from \"./components/AppTest\";\nReactDOM.render(<AppTest />, document.getElementById(\"root\"));\n",["71","72"],"/home/ammar/organization-of-points/src/App.js",["73","74","75"],"import \"./App.css\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport SvgScreen from \"./screens/SvgScreen\";\nimport { useMousePosition } from \"./utils/useMousePosition\";\n\nfunction App() {\n  const position = useMousePosition();\n  const lineContainer = useRef();\n\n  const [graph, setGraph] = useState({\n    points: [\n      {\n        cx: 1,\n        cy: 1,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n      {\n        cx: 0,\n        cy: 0,\n      },\n    ],\n    lines: [\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n      { x1: 2, y1: 2, x2: 3, y2: 4 },\n    ],\n  });\n\n  const handleLine = (e) => {\n    console.log(\"test\");\n  };\n  const handleCircle = (e) => {\n    // const newLine = document.createElement(\"line\");\n    const newLine = `<line x1=\"20\" y1=\"20\" x2=\"${position.x}\" y2=\"${position.y}\" strokeWidth=\"4\" stroke=\"black\" />`;\n\n    const id = e.target.id;\n    if (id === \"c1\") {\n      // newLine.current.setAttribute(\"x1\", \"20\");\n      // newLine.setAttribute(\"y1\", \"20\");\n      // newLine.setAttribute(\"x2\", \"100\");\n      // newLine.setAttribute(\"y2\", \"100\");\n      // newLine.setAttribute(\"strokeWidth\", \"4\");\n      // newLine.setAttribute(\"stroke\", \"black\");\n      // lineContainer.current.appendChild(newLine);\n    }\n\n    lineContainer.current.insertAdjacentHTML(\"beforeend\", newLine);\n  };\n\n  return (\n    <div className=\"App\" onClick={(e) => console.log(e.clientX, e.clientY)}>\n      <SvgScreen\n        handleCircle={handleCircle}\n        handleLine={handleLine}\n        lineContainer={lineContainer}\n      />\n      <div style={{ color: \"#fff\" }}>\n        {position.x}:{position.y}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/ammar/organization-of-points/src/components/AppTest.js",["76","77","78"],"import React from \"react\";\nimport DrawBoard from \"./DrawBoard\";\nimport AnswerField from \"../screens/TestScreen/components/AnswerField\";\nimport Graph from \"./Graph\";\nimport \"./style.css\";\nimport QuestionField from \"../screens/TestScreen/components/QuestionField\";\nexport default function AppTest() {\n  return (\n    <QuestionField />\n    // <AnswerField\n    // points={[\n    //   { x: 100, y: 100 },\n    //   { x: 200, y: 100 },\n    //   { x: 200, y: 200 },\n    // ]}\n    // />\n  );\n}\n","/home/ammar/organization-of-points/src/utils/useMousePosition.js",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/AnswerField.jsx",["79","80","81","82","83","84","85"],"/home/ammar/organization-of-points/src/screens/TestScreen/components/QuestionField.jsx",["86","87","88","89","90"],"/home/ammar/organization-of-points/src/components/DrawBoard/index.jsx",["91","92","93","94","95","96","97","98","99"],"import React, { useRef, useState, useEffect, useCallback } from \"react\";\nimport { Line } from \"../Graph\";\nimport {shapes} from '../../utils/boardUtils'\nimport \"./style.css\";\n\nfunction distance(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n\nfunction normalizePoint(point, factor){\n  const {x,y} = point;\n  if(factor != 0){\n    return{x: x/factor, y:y/factor}\n  }\n}\n\nconst addLine = \"add\";\nconst adjustLine = \"adjust\";\nconst deleteLine = \"delete\";\nconst submitGraph = \"submit\";\nconst minTwoPointsDistance = 20;\n\nexport default function DrawBoard(props) {\n  const boardRef = useRef();\n  const [boardSize, setBoardSize] = useState(0);\n  const [isDeleteActive, SetDeleteActivion] = useState(false);\n  const [linesNum, setLinesNum] = useState(3);\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  const [lines, setlines] = useState([]);\n\n  const getMousePosition = useCallback(\n    (evt) => {\n      const point = boardRef.current.createSVGPoint();\n      point.x = evt.clientX;\n      point.y = evt.clientY;\n      const {x,y} = point.matrixTransform(\n        boardRef.current.getScreenCTM().inverse()\n      );\n      return {x,y};\n    },\n    [boardRef]\n  );\n\n  const getSelectedPoint = useCallback(\n    (point, index) => {\n      if (index < lines.length) {\n        return lines[index][point];\n      }\n    },\n    [linesNum]\n  );\n\n  const startDrag = useCallback(\n    (evt) => {\n      if (evt.target.classList.contains(\"draggable\")) {\n        console.log(\"start drag ....\");\n        const { point, index } = evt.target.dataset;\n        const pointCoordinates = getSelectedPoint(point, index);\n        if (pointCoordinates) {\n          const offset = getMousePosition(evt);\n          offset.x -= pointCoordinates.x;\n          offset.y -= pointCoordinates.y;\n          console.log(offset);\n          setSelectedPoint({\n            point,\n            index,\n            offset,\n          });\n        }\n      } else if (evt.target.classList.contains(\"erasable\")) {\n        console.log(\"object is erasable...\");\n        const index = evt.target.dataset.index;\n        setlines(prev =>{\n          console.log(prev)\n          return prev.filter((_,i) => i != index);\n        })\n      }\n    },\n\n    [setSelectedPoint, getSelectedPoint,setlines]\n  );\n\n  const drag = useCallback(\n    (evt) => {\n      if (selectedPoint) {\n        evt.preventDefault();\n        const position = getMousePosition(evt);\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        actualPoint.x = position.x - offset.x;\n        actualPoint.y = position.y - offset.y;\n        setlines((prevPoints) => [...prevPoints]);\n      }\n    },\n    [selectedPoint, getMousePosition, getSelectedPoint]\n  );\n\n  const endDrag = useCallback(\n    (evt) => {\n      boardRef.current.removeEventListener(\"mousemove\", drag);\n      if (selectedPoint) {\n        const { point, index, offset } = selectedPoint;\n        const actualPoint = getSelectedPoint(point, index);\n        if (actualPoint) {\n          let closestPointFound = false;\n          lines.forEach((line, index) => {\n            if (!closestPointFound) {\n              if (distance(actualPoint, line.point_1) < minTwoPointsDistance) {\n                actualPoint.x = line.point_1.x;\n                actualPoint.y = line.point_1.y;\n                closestPointFound = true;\n              } else if (\n                distance(actualPoint, line.point_2) < minTwoPointsDistance\n              ) {\n                actualPoint.x = line.point_2.x;\n                actualPoint.y = line.point_2.y;\n                closestPointFound = true;\n              }\n            }\n          });\n          setlines((prevPoints) => [...prevPoints]);\n        }\n        setSelectedPoint(null)\n      }\n    },\n    [boardRef, drag, selectedPoint]\n  );\n\n    useEffect(() => {\n      setBoardSize(boardRef.current.clientHeight);\n    }, [])\n  \n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousedown\", startDrag);\n    boardRef.current.addEventListener(\"mouseup\", endDrag);\n    boardRef.current.addEventListener(\"mouseleave\", endDrag);\n  }, [boardRef, drag, startDrag, endDrag]);\n\n  useEffect(() => {\n    boardRef.current.addEventListener(\"mousemove\", drag);\n  }, [selectedPoint]);\n\n  // tool handlers\n\n  const handleAddLine = (event) => {\n    const newLine = {\n      point_1: {\n        x: 20,\n        y: 280,\n      },\n      point_2: {\n        x: 20,\n        y: 240,\n      },\n    };\n\n    setlines((prev) => {\n      prev.push({ ...newLine });\n      return [...prev];\n    });\n\n    setLinesNum((prev) => prev + 1);\n    SetDeleteActivion(false);\n  };\n\n  const handleDeleteLine = (event) => {\n    console.log(\"delete activated...\");\n    SetDeleteActivion(true);\n  };\n\n  const handleClear = (event) => { \n    setlines([]); \n  };\n\n  const handleSubmitGraph = (event) => { \n    const myStorage = window.localStorage;\n    const normalizedLines = [...lines].map(line => {\n      let {point_1,point_2} = line;\n      point_1=normalizePoint(point_1,boardSize);\n      point_2=normalizePoint(point_2,boardSize);\n      return{point_1,point_2};\n    })\n    let shapes = myStorage.getItem('myShapes');\n    if(shapes){\n      shapes = JSON.parse(shapes);\n      shapes.push(normalizedLines);\n      myStorage.setItem(\"myShapes\",JSON.stringify(shapes));\n      return;\n    }\n    shapes = [];\n    shapes.push(normalizedLines);\n    myStorage.setItem('myShapes',JSON.stringify(shapes));\n  };\n  return (\n    <div className=\"painter\">\n      <svg\n        ref={boardRef}\n        id=\"mainBoard\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        className=\"draw-board\"\n      >\n        {lines.map((line, index) => {\n          return (\n            <Line\n              key={JSON.stringify(line) + index}\n              {...line}\n              index={index}\n              fill={index === lines.length - 1 ? \"blue\" : \"red\"}\n              deleteLine={isDeleteActive}\n            />\n          );\n        })}\n      </svg>\n      <div className=\"actions\">\n        <button name={addLine} onClick={handleAddLine}>\n          Add Line\n        </button>\n        <button name={deleteLine} onClick={handleDeleteLine}>\n          delete Line\n        </button>\n        <button name={deleteLine} onClick={handleClear}>\n          clear all\n        </button>\n        <button name={submitGraph} onClick={handleSubmitGraph}>\n          submit Graph\n        </button>\n      </div>\n    </div>\n  );\n}\n","/home/ammar/organization-of-points/src/screens/SvgScreen/index.jsx",["100","101"],"import React from \"react\";\n\nfunction SvgScreen(props) {\n  const { handleCircle, handleLine, lineContainer } = props;\n  return (\n    <div style={{ padding: 10, borderWidth: 1, borderColor: \"#000\" }}>\n      <svg style={{ width: \"100%\", height: \"100vh\" }}>\n        <g fill=\"grey\" transform=\"rotate(0 0 0)\">\n          <circle\n            id=\"c1\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c2\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c3\"\n            onClick={handleCircle}\n            cx=\"100\"\n            cy=\"20\"\n            r=\"10\"\n            fill=\"red\"\n          />\n          <circle\n            id=\"c4\"\n            onClick={handleCircle}\n            cx=\"20\"\n            cy=\"100\"\n            r=\"10\"\n            fill=\"red\"\n          />\n        </g>\n        <g\n          ref={lineContainer}\n          id=\"lines-container\"\n          fill=\"grey\"\n          transform=\"rotate(0 40 100)\"\n        ></g>\n      </svg>\n    </div>\n  );\n}\n\nexport default SvgScreen;\n\n{\n  /* <line\n            id=\"l1\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"20\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l2\"\n            onClick={handleLine}\n            x1=\"100\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l3\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"20\"\n            y2=\"20\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          />\n          <line\n            id=\"l4\"\n            onClick={handleLine}\n            x1=\"20\"\n            y1=\"100\"\n            x2=\"100\"\n            y2=\"100\"\n            strokeWidth=\"4\"\n            stroke=\"black\"\n          /> */\n}\n\n//   <circle\n//   id=\"c1\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c2\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c3\"\n//   onClick={handleCircle}\n//   cx=\"100\"\n//   cy=\"20\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n// <circle\n//   id=\"c4\"\n//   onClick={handleCircle}\n//   cx=\"20\"\n//   cy=\"100\"\n//   r=\"6\"\n//   fill=\"red\"\n// />\n","/home/ammar/organization-of-points/src/components/Graph/index.jsx",["102","103"],"\nimport './style.css'\nexport function Line(props){\n    const {point_1, point_2,factor} = props;\n    return (\n        <g fill={props.fill}>\n        <circle  cx={point_1.x} cy={point_1.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_1'/>\n        <circle  cx={point_2.x} cy={point_2.y} r=\"5\" className='draggable' data-index={props.index} data-point = 'point_2'/>\n        <line x1={point_1.x} y1={point_1.y} x2={point_2.x} y2={point_2.y} strokeWidth=\"2\" stroke={props.fill} data-index={props.index} className={props.deleteLine? 'erasable':'normal'}/>\n        </g>\n        \n    )\n}\n\nexport default function Graph(props) {\n  \n    return (<g>\n        {props.points.map(point=>{\n               <circle  cx={point.x} cy={point.y} r=\"5\" />\n           })}\n    </g>\n\n           \n    )\n}\n","/home/ammar/organization-of-points/src/utils/consts.js",[],"/home/ammar/organization-of-points/src/utils/boardUtils.js",[],"/home/ammar/organization-of-points/src/screens/TestScreen/components/ShapesInfo.jsx",["104","105"],"/home/ammar/organization-of-points/src/components/ExamSteps/index.jsx",["106","107"],"/home/ammar/organization-of-points/src/components/Timer/index.jsx",["108","109","110"],"import React, { useEffect, useState } from \"react\";\n\nconst Timer = (props) => {\n  const timeRightNow = new Date().getTime();\n\n  const [timer, setTimer] = useState(null);\n\n  useEffect(() => {\n    const timer = setInterval(function () {\n      const now = new Date().getTime();\n      const deadline = timeRightNow + (props.choosenTime || 10000000);\n      const t = deadline - now;\n      const days = Math.floor(t / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((t % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const minutes = Math.floor((t % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((t % (1000 * 60)) / 1000);\n      const updatedTimer = minutes + \":\" + seconds;\n      setTimer(updatedTimer);\n      if (t < 0) {\n        clearInterval(timer);\n        const timeOut = \"TIME OUT\";\n        setTimer(timeOut);\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div\n      style={{\n        width: 150,\n        height: 150,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: 30,\n        fontWeight: \"bold\",\n        color: \"#FFF\",\n        boxShadow: \"1px 1px 25px #9E9E9E\",\n        margin: 5,\n        borderWidth: 1,\n        borderColor: \"#9E9E9E\",\n        background: \"#F2AF58\",\n        ...props.style,\n        borderRadius: props.style.height / 2 || 75,\n      }}\n    >\n      <h3>{timer}</h3>\n    </div>\n  );\n};\n\nexport default Timer;\n","/home/ammar/organization-of-points/src/screens/TestScreen/index.jsx",[],{"ruleId":"111","severity":1,"message":"112","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":11},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"111","severity":1,"message":"119","line":2,"column":25,"nodeType":"113","messageId":"114","endLine":2,"endColumn":34},{"ruleId":"111","severity":1,"message":"120","line":10,"column":10,"nodeType":"113","messageId":"114","endLine":10,"endColumn":15},{"ruleId":"111","severity":1,"message":"121","line":10,"column":17,"nodeType":"113","messageId":"114","endLine":10,"endColumn":25},{"ruleId":"111","severity":1,"message":"122","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":17},{"ruleId":"111","severity":1,"message":"123","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":19},{"ruleId":"111","severity":1,"message":"124","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":13},{"ruleId":"111","severity":1,"message":"125","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":16},{"ruleId":"111","severity":1,"message":"126","line":7,"column":8,"nodeType":"113","messageId":"114","endLine":7,"endColumn":13},{"ruleId":"111","severity":1,"message":"127","line":8,"column":8,"nodeType":"113","messageId":"114","endLine":8,"endColumn":17},{"ruleId":"111","severity":1,"message":"128","line":9,"column":10,"nodeType":"113","messageId":"114","endLine":9,"endColumn":15},{"ruleId":"111","severity":1,"message":"129","line":10,"column":9,"nodeType":"113","messageId":"114","endLine":10,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":35,"column":7,"nodeType":"132","endLine":35,"endColumn":16,"suggestions":"133"},{"ruleId":"130","severity":1,"message":"134","line":60,"column":6,"nodeType":"132","endLine":60,"endColumn":19,"suggestions":"135"},{"ruleId":"111","severity":1,"message":"125","line":2,"column":10,"nodeType":"113","messageId":"114","endLine":2,"endColumn":16},{"ruleId":"111","severity":1,"message":"136","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":22},{"ruleId":"111","severity":1,"message":"137","line":6,"column":8,"nodeType":"113","messageId":"114","endLine":6,"endColumn":23},{"ruleId":"111","severity":1,"message":"129","line":10,"column":10,"nodeType":"113","messageId":"114","endLine":10,"endColumn":28},{"ruleId":"111","severity":1,"message":"138","line":10,"column":30,"nodeType":"113","messageId":"114","endLine":10,"endColumn":44},{"ruleId":"111","severity":1,"message":"139","line":3,"column":9,"nodeType":"113","messageId":"114","endLine":3,"endColumn":15},{"ruleId":"140","severity":1,"message":"141","line":12,"column":13,"nodeType":"142","messageId":"143","endLine":12,"endColumn":15},{"ruleId":"111","severity":1,"message":"144","line":18,"column":7,"nodeType":"113","messageId":"114","endLine":18,"endColumn":17},{"ruleId":"130","severity":1,"message":"145","line":50,"column":5,"nodeType":"132","endLine":50,"endColumn":15,"suggestions":"146"},{"ruleId":"140","severity":1,"message":"141","line":75,"column":41,"nodeType":"142","messageId":"143","endLine":75,"endColumn":43},{"ruleId":"130","severity":1,"message":"147","line":80,"column":5,"nodeType":"132","endLine":80,"endColumn":50,"suggestions":"148"},{"ruleId":"111","severity":1,"message":"149","line":102,"column":31,"nodeType":"113","messageId":"114","endLine":102,"endColumn":37},{"ruleId":"130","severity":1,"message":"150","line":126,"column":5,"nodeType":"132","endLine":126,"endColumn":36,"suggestions":"151"},{"ruleId":"130","severity":1,"message":"152","line":142,"column":6,"nodeType":"132","endLine":142,"endColumn":21,"suggestions":"153"},{"ruleId":"111","severity":1,"message":"154","line":4,"column":25,"nodeType":"113","messageId":"114","endLine":4,"endColumn":35},{"ruleId":"155","severity":1,"message":"156","line":55,"column":1,"nodeType":"157","messageId":"158","endLine":96,"endColumn":2},{"ruleId":"111","severity":1,"message":"159","line":4,"column":29,"nodeType":"113","messageId":"114","endLine":4,"endColumn":35},{"ruleId":"160","severity":1,"message":"161","line":18,"column":32,"nodeType":"162","messageId":"163","endLine":18,"endColumn":34},{"ruleId":"130","severity":1,"message":"164","line":9,"column":3,"nodeType":"113","endLine":9,"endColumn":12,"suggestions":"165"},{"ruleId":"130","severity":1,"message":"131","line":16,"column":6,"nodeType":"132","endLine":16,"endColumn":17,"suggestions":"166"},{"ruleId":"111","severity":1,"message":"167","line":52,"column":9,"nodeType":"113","messageId":"114","endLine":52,"endColumn":19},{"ruleId":"111","severity":1,"message":"168","line":67,"column":9,"nodeType":"113","messageId":"114","endLine":67,"endColumn":19},{"ruleId":"111","severity":1,"message":"169","line":13,"column":13,"nodeType":"113","messageId":"114","endLine":13,"endColumn":17},{"ruleId":"111","severity":1,"message":"170","line":14,"column":13,"nodeType":"113","messageId":"114","endLine":14,"endColumn":18},{"ruleId":"130","severity":1,"message":"171","line":27,"column":6,"nodeType":"132","endLine":27,"endColumn":8,"suggestions":"172"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["173"],"no-negated-in-lhs",["174"],"'useEffect' is defined but never used.","'graph' is assigned a value but never used.","'setGraph' is assigned a value but never used.","'DrawBoard' is defined but never used.","'AnswerField' is defined but never used.","'Graph' is defined but never used.","'Button' is defined but never used.","'Timer' is defined but never used.","'ExamSteps' is defined but never used.","'lines' is defined but never used.","'adjustShapeToBoard' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.shape'. Either include it or remove the dependency array.","ArrayExpression",["175"],"React Hook useEffect has a missing dependency: 'lines'. Either include it or remove the dependency array.",["176"],"'RotateLeftIcon' is defined but never used.","'RotateRightIcon' is defined but never used.","'getShapePoints' is defined but never used.","'shapes' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'adjustLine' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'lines'. Either include it or remove the dependency array.",["177"],"React Hook useCallback has a missing dependency: 'getMousePosition'. Either include it or remove the dependency array.",["178"],"'offset' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'getSelectedPoint' and 'lines'. Either include them or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'drag'. Either include it or remove the dependency array.",["180"],"'handleLine' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'factor' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect contains a call to 'setBoardSize'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [] as a second argument to the useEffect Hook.",["181"],["182"],"'handleNext' is assigned a value but never used.","'handleSkip' is assigned a value but never used.","'days' is assigned a value but never used.","'hours' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.choosenTime' and 'timeRightNow'. Either include them or remove the dependency array.",["183"],"no-global-assign","no-unsafe-negation",{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [props.shape, svgSize]",{"range":"202","text":"203"},"Update the dependencies array to be: [currentLine, lines]",{"range":"204","text":"205"},"Update the dependencies array to be: [lines]",{"range":"206","text":"207"},"Update the dependencies array to be: [getSelectedPoint, getMousePosition]",{"range":"208","text":"209"},"Update the dependencies array to be: [drag, getSelectedPoint, lines, selectedPoint]",{"range":"210","text":"211"},"Update the dependencies array to be: [drag, selectedPoint]",{"range":"212","text":"213"},"Add dependencies array: []",{"range":"214","text":"215"},"Update the dependencies array to be: [boardSize, props.shape]",{"range":"216","text":"217"},"Update the dependencies array to be: [props.choosenTime, timeRightNow]",{"range":"218","text":"219"},[1257,1266],"[props.shape, svgSize]",[1856,1869],"[currentLine, lines]",[1354,1364],"[lines]",[2231,2276],"[getSelectedPoint, getMousePosition]",[3802,3833],"[drag, getSelectedPoint, lines, selectedPoint]",[4260,4275],"[drag, selectedPoint]",[389,389],", []",[516,527],"[boardSize, props.shape]",[909,911],"[props.choosenTime, timeRightNow]"]